WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.674
我们来详细介绍一下 C++ 如何使用 RAM

00:00:03.674 --> 00:00:07.290
你可以将 RAM 视为一组用于存储信息的插槽

00:00:07.290 --> 00:00:09.359
当你的程序运行数据时

00:00:09.359 --> 00:00:11.369
数据通常存储在 RAM 中

00:00:11.369 --> 00:00:14.519
这些数据可以被覆盖 事实上 当你关闭电脑时

00:00:14.519 --> 00:00:17.460
因为 RAM 是不稳定的 RAM 中的数据会被擦除

00:00:17.460 --> 00:00:20.880
因此 RAM 用于临时存储

00:00:20.879 --> 00:00:24.015
举一个简单的例子 比如声明一个字符变量

00:00:24.015 --> 00:00:26.515
当 x 变量被声明时

00:00:26.515 --> 00:00:30.330
你的程序将进入计算机的 RAM 和预留空间

00:00:30.329 --> 00:00:32.979
空间大小取决于变量类型

00:00:32.979 --> 00:00:36.689
在字符变量的情况下 会保留一个字节

00:00:36.689 --> 00:00:39.015
然后 当 x 变量被定义时

00:00:39.015 --> 00:00:42.060
字符的二进制值存储在 RAM 中

00:00:42.060 --> 00:00:48.215
在 C++ 中 程序可以跟踪的最小内存单元是一个字节

00:00:48.215 --> 00:00:51.960
那么 如果你的程序定义了另一个字符变量 会发生什么？

00:00:51.960 --> 00:00:55.355
编译器会将这个字符分配给下一个可用的字节

00:00:55.354 --> 00:00:57.344
那么 一个整数变量呢？

00:00:57.344 --> 00:01:00.594
一个 32 位整数将占用四个字节的内存

00:01:00.594 --> 00:01:04.079
所以一个整数变量在 RAM 中占用四个空格

00:01:04.079 --> 00:01:06.659
编译器和计算机架构将决定

00:01:06.659 --> 00:01:11.049
每个变量需要多少空间才能优化程序

00:01:11.049 --> 00:01:14.959
一般来说 后一个变量放在前一个变量的上方

00:01:14.959 --> 00:01:20.214
每个字节也有一个地址 方便程序知道在哪里找到变量

00:01:20.215 --> 00:01:25.875
C++ 放置变量值的整个区域有一个特殊名称：栈

00:01:25.875 --> 00:01:31.290
C++ 使用堆栈来有效地管理读取和写入内存

00:01:31.290 --> 00:01:34.785
当函数终止并且变量超出范围时

00:01:34.784 --> 00:01:40.254
编译器会冻结或反向操作 解除分配这些的内存位置

00:01:40.254 --> 00:01:44.039
除了栈之外 编译器还为不同的任务提供其他内存位置

00:01:44.040 --> 00:01:46.380
例如存储代码文本

00:01:46.379 --> 00:01:49.769
并为全局变量保留空间

00:01:49.769 --> 00:01:52.950
C++ 还提供了一个称为堆的内存区域

00:01:52.950 --> 00:01:56.700
在那里你可以手动控制变量何时从内存中移除

00:01:56.700 --> 00:01:59.935
但是 这与代码优化有什么关系呢？

00:01:59.935 --> 00:02:05.719
因为从内存中读取和写入需要时间 这会拖慢程序

00:02:05.719 --> 00:02:08.949
如果你声明并定义了一个你并不需要的变量

00:02:08.949 --> 00:02:10.974
程序可能会变慢

00:02:10.974 --> 00:02:13.044
如果你进行了不必要的变量复制操作

00:02:13.044 --> 00:02:14.859
程序也会变慢

00:02:14.860 --> 00:02:18.170
此外 栈一般也比堆更有效率

00:02:18.169 --> 00:02:22.914
所以 如何声明变量最终会影响程序的性能

00:02:22.914 --> 00:02:26.454
因此 你越了解每行代码的影响

00:02:26.455 --> 00:02:28.455
优化效果就更好

00:02:28.455 --> 00:02:31.875
这就是我们为什么强调要学会以电脑的方式思考的原因了

00:02:31.875 --> 00:02:34.150
了解电脑硬件的限制

00:02:34.150 --> 00:02:36.610
有助于做出更好的编程决策

