WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.320
目前 你已经知道了低效的代码会导致你的程序变慢

00:00:04.320 --> 00:00:09.269
因为程序会执行不必要的 CPU 操作和内存访问

00:00:09.269 --> 00:00:12.570
接下来 我们将讨论优化代码的实践操作

00:00:12.570 --> 00:00:16.515
代码优化是一个很大的主题 我们需要分析算法

00:00:16.515 --> 00:00:19.320
了解计算机如何执行指令

00:00:19.320 --> 00:00:20.550
并了解编程语言

00:00:20.550 --> 00:00:24.155
和你正在使用的编译器的细微之处

00:00:24.155 --> 00:00:28.620
代码效率还取决于你正在使用的编译器和硬件

00:00:28.620 --> 00:00:31.200
许多编译器会尝试为你优化代码

00:00:31.199 --> 00:00:34.644
不同的编译器的优化方式可能不同

00:00:34.645 --> 00:00:38.615
在某种情况下运行良好的代码 可能换个场景就无法有效运行

00:00:38.615 --> 00:00:41.355
而且 CPU架构指令集

00:00:41.354 --> 00:00:46.515
可能包括一些指令 可以非常高效地执行一个操作 但无法保证另一个操作的效率

00:00:46.515 --> 00:00:50.445
因此 优化代码时不能只依靠本能

00:00:50.445 --> 00:00:54.209
你需要测试你的代码并找到对CPU有高需求的地方

00:00:54.209 --> 00:00:56.265
并确定该需求是否与时间

00:00:56.265 --> 00:00:58.439
内存使用情况或功耗有关

00:00:58.439 --> 00:01:02.309
然后 你对代码所做的任何更改都需要进行测试

00:01:02.310 --> 00:01:06.780
确保一切运行都如你所期望的那样高效

00:01:06.780 --> 00:01:11.174
接下来 你将有机会优化 C++ 直方图过滤器

00:01:11.174 --> 00:01:13.799
你可能还记得 在 C++ 的入门课程中学过

00:01:13.799 --> 00:01:15.634
Andy 还向 Elisia 展示了他的代码

00:01:15.635 --> 00:01:19.955
Andy 已经将他的 Python 直方图过滤器代码翻译成了 C++

00:01:19.954 --> 00:01:22.894
Elisia 提到他的代码效率有点低

00:01:22.894 --> 00:01:25.140
我们向你提供的是低效的代码

00:01:25.140 --> 00:01:28.000
你的任务是让它运行得尽可能快

