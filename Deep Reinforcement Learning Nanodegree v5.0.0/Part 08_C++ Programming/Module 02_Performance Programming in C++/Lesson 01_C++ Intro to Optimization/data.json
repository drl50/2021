{
  "data": {
    "lesson": {
      "id": 393587,
      "key": "2989a7f9-346e-44fb-906b-3985f7c81cca",
      "title": "C++ Intro to Optimization",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Optimizing C++ involves understanding how a computer actually runs your programs. You'll learn how C++ uses the CPU and RAM to execute your code and get a sense for what can slow things down.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/2989a7f9-346e-44fb-906b-3985f7c81cca/393587/1585702842115/C%2B%2B+Intro+to+Optimization+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/2989a7f9-346e-44fb-906b-3985f7c81cca/393587/1585702838193/C%2B%2B+Intro+to+Optimization+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 440704,
          "key": "ebee0dd5-0729-4ca9-acd9-20fb0354830f",
          "title": "Course Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ebee0dd5-0729-4ca9-acd9-20fb0354830f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 458583,
              "key": "3feafd59-1f2c-4a40-a015-2fa2411cace6",
              "title": "Course Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Lwc5oYApdUM",
                "china_cdn_id": "Lwc5oYApdUM.mp4"
              }
            }
          ]
        },
        {
          "id": 393588,
          "key": "aca2476a-4c8f-4c46-9d43-46dcea5143e9",
          "title": "Empathize with the Computer",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "aca2476a-4c8f-4c46-9d43-46dcea5143e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 462457,
              "key": "55883f15-9c88-4a77-9353-7cd221f8a837",
              "title": "C   Opt 01 L V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Kdx1_BI5ddc",
                "china_cdn_id": "Kdx1_BI5ddc.mp4"
              }
            }
          ]
        },
        {
          "id": 439815,
          "key": "8e113cb0-1085-489e-bfcd-bbe72894b6ad",
          "title": "Intro to Computer Hardware",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8e113cb0-1085-489e-bfcd-bbe72894b6ad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461393,
              "key": "537041ac-7b97-430c-b29b-64a940ee4152",
              "title": "02 L Intro To Comp HW V1 RENDER V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WDMGkq9mkB8",
                "china_cdn_id": "WDMGkq9mkB8.mp4"
              }
            },
            {
              "id": 439817,
              "key": "6e17e6c0-8a04-431c-8d31-f1f569d375f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Compilers and Optimization\n\nAs mentioned in the video, a C++ compiler rewrites your code into binary instructions.  Many compilers will try to optimize code for you. These optimizations aim to \n* make the code run faster,\n* use less memory, or\n* consume less electric power. \n \nCompilers can be quite good at optimizing as they write your C++ code into machine code; however, when running the same code through different compilers, you might find that the slowest parts of your code are not the same in each case. Hence, it's important to find the weak spots by actually measuring how long it takes to execute or how many resources the code uses. You'll learn more about measuring your code later in the lesson.",
              "instructor_notes": ""
            },
            {
              "id": 439838,
              "key": "64881b13-3cf4-4e03-b390-e91fc0b02916",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hardware Limitations\n\nHardware can put limitations on your programs and lead to code inefficiencies. \n\nIn embedded systems engineering, you might not always be working with the newest and most powerful computer processors. A typical example would be trigonometric functions. Some computer architectures might use relatively slow software approximations for a sine function rather than using the arithmetic/logic unit. If you can use an approximation that runs directly on the CPU's arithmetic/logic unit, you might get your code to run faster. ",
              "instructor_notes": ""
            },
            {
              "id": 439839,
              "key": "04485dda-dc2a-425b-8057-3d80a1d5a832",
              "title": "Hardware Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "04485dda-dc2a-425b-8057-3d80a1d5a832",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the Hardware Parts with its Purpose"
                },
                "concepts_label": "Hardware",
                "answers_label": "Purpose",
                "concepts": [
                  {
                    "text": "Random Access Memory (RAM)",
                    "correct_answer": {
                      "id": "a1508883911776",
                      "text": "Used to temporarily store information about your program"
                    }
                  },
                  {
                    "text": "Arithmetic/Logical Unit (ALU)",
                    "correct_answer": {
                      "id": "a1508883950376",
                      "text": "Resolves mathematical and boolean equations"
                    }
                  },
                  {
                    "text": "Central Processing Unit (CPU)",
                    "correct_answer": {
                      "id": "a1508883951121",
                      "text": "Carries out the instructions in your code and resolves mathematical equations"
                    }
                  },
                  {
                    "text": "Control Unit (CU)",
                    "correct_answer": {
                      "id": "a1508883968496",
                      "text": "Responsible for carrying out the instructions in your code"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1508883951121",
                    "text": "Carries out the instructions in your code and resolves mathematical equations"
                  },
                  {
                    "id": "a1508883911776",
                    "text": "Used to temporarily store information about your program"
                  },
                  {
                    "id": "a1508883968496",
                    "text": "Responsible for carrying out the instructions in your code"
                  },
                  {
                    "id": "a1508883950376",
                    "text": "Resolves mathematical and boolean equations"
                  }
                ]
              }
            },
            {
              "id": 440824,
              "key": "e61557c0-96d9-4ff3-91f7-7ebd3ea2f63a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## C++ Demonstrations\n\nThis lesson contains a series of demonstrations showing how C++ manages memory. You'll see in the next part that these demonstrations are embedded into the classroom. \n\nEach demonstration is contained in a separate folder with a set of instructions and code. The next section gives more details about how you will run the demonstrations. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 457424,
          "key": "77729b69-7e77-4da9-a93f-32b7ae9dc4d6",
          "title": "Embedded Terminal Explanation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "77729b69-7e77-4da9-a93f-32b7ae9dc4d6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461303,
              "key": "23b81328-4739-4690-be6e-38ca7a6b7110",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Embedded Terminal\n\nIn this lesson (C++ Intro to Optimization)  and the following lesson (C++ Optimization Practice), you'll be using a feature of that classroom that you haven't seen yet.\n\nWhen you go to the next part of the lesson, an embedded command line tool will load. The command line allows you to execute commands directly to a computer instead of using a mouse and user interface. On Macs and Linux machines, there is a program called Terminal that allows you to type and execute these commands. The equivalent in Windows is the Console Window. \n\nHere is a screenshot of what the embedded command line tool interface looks like:\n",
              "instructor_notes": ""
            },
            {
              "id": 461304,
              "key": "776e8dae-b746-4491-9afe-412141f61c4e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a078e9d_cli/cli.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/776e8dae-b746-4491-9afe-412141f61c4e",
              "caption": "Command Line Interface",
              "alt": "Command Line Interface",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 489252,
              "key": "e309e639-1383-4bf7-aa0d-0cfae2ceb307",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The following video walks you through how to use the embedded terminal.",
              "instructor_notes": ""
            },
            {
              "id": 489253,
              "key": "301d535a-8f1a-404b-ab6e-a8c9c81c6cb3",
              "title": "Nd113 Embedded Terminal V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Bhl5JQ_N9V8",
                "china_cdn_id": "Bhl5JQ_N9V8.mp4"
              }
            },
            {
              "id": 489398,
              "key": "5aae1371-aaca-4f20-b70f-091fb4c6a3dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Linux Commands\n\nTo learn more about using the command line in the terminal, check out these links:\n* [Top 10 linux commands](https://www.lifewire.com/linux-commands-for-navigating-file-system-4027320)\n* [Basic Linux Commands](https://diyhacking.com/linux-commands-for-beginners/)\n",
              "instructor_notes": ""
            },
            {
              "id": 457425,
              "key": "ec7ea04a-efc1-44aa-a21b-6747e036215d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### File Navigation\n\nIn the C++ lesson, each demonstration or exercise uses this interface. In the top left corner, you'll find the file browser. Each demo or exercise is contained in its own folder. The name of the folder corresponds with the title of the current lesson section. For example, the next lesson section is called \"Demo: Machine Code\", and the folder is called \"demo_machine_code\".\n\nHere is a screenshot of where the file browser is located:",
              "instructor_notes": ""
            },
            {
              "id": 461305,
              "key": "601cf50d-210a-4ecb-b1d2-9bccafb4cee6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a078f3e_files/files.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/601cf50d-210a-4ecb-b1d2-9bccafb4cee6",
              "caption": "File Browser",
              "alt": "File Browser",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 461306,
              "key": "ebd70975-821d-4e24-af02-9b4cb264c3c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you double click on a folder, the folder will open. Likewise, double clicking on a file will open the file in a text editor.  You can also right-click on a file or folder to download or delete it among other options. The plus sign is used to add new files or folders as well as to upload files or folders.\n\nThis next image shows where the text editor is located:\n\n### Text Editor",
              "instructor_notes": ""
            },
            {
              "id": 461307,
              "key": "3feb9ffa-4447-4894-99a4-5b3aed4d6b82",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a078fc6_texteditor/texteditor.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3feb9ffa-4447-4894-99a4-5b3aed4d6b82",
              "caption": "Text Editor",
              "alt": "Text Editor",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 461308,
              "key": "6f0ceb42-5b8c-4707-afcd-a3bc08a09a59",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can edit text files in the text editor. In the C++ exercises, this is where you will be modifying or writing C++ code. The classroom saves your work automatically as you modify files.",
              "instructor_notes": ""
            },
            {
              "id": 461309,
              "key": "9dff555b-dc61-4123-b4a7-5f4d34c20a30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Terminal Window\n\nTo actually run commands that will compile and execute your C++ programs, you will need to open a terminal window. You click where it says \"New Terminal\" in the middle bottom of the screen:",
              "instructor_notes": ""
            },
            {
              "id": 461310,
              "key": "b79a77ff-c00d-49ad-85d3-e9941ad6baf4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0792cf_emptyterminal/emptyterminal.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b79a77ff-c00d-49ad-85d3-e9941ad6baf4",
              "caption": "New Terminal Button",
              "alt": "New Terminal Button",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 461311,
              "key": "33c86f15-ed9b-4483-80e1-6b6b35445717",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And this opens a new terminal window:",
              "instructor_notes": ""
            },
            {
              "id": 461312,
              "key": "2da31a51-0229-438d-a45e-10d368d16715",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a079548_untitled-drawing/untitled-drawing.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2da31a51-0229-438d-a45e-10d368d16715",
              "caption": "Terminal Window",
              "alt": "Terminal Window",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 461313,
              "key": "4b7f1159-38b8-4143-b28c-620c5be60aa6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The terminal window is where you'll type commands to execute your C++ code. The exercises and demos include instruction files that tell you what commands to type and in what order. So you do not need to learn command line syntax for these lessons.\n\nHowever, here is an explanation of what those commands do:\n```\ncd foldername\n```\n\ncd stands for \"change directory\". You can use the cd command to change what directory your terminal window is looking at\n\n```\ng++ main.cpp other_files.cpp\n```\n\nThis command compiles your C++ program. Sometimes you'll also see a command like:\n```\ng++ -std=c++11 main.cpp other_files.cpp\n```\n\nThis command tells the compiler to use the C++11 standard. By default the compiler uses C++98. C++11 contains a handful of features that C++98 does not contain. So whenever a program uses a feature of C++11, you need to tell the compiler.\n\nThe last command you'll see in these lessons is\n```\n./a.out\n```\n\nWhen you compile your programs, the compiler outputs a file called a.out. \n\nExecuting ```./a.out``` on the command line will run your program.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 461319,
              "key": "3cdce509-7ede-4a13-bd65-4ef96d270797",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you'd like to learn more about the basics of terminal commands, here is a link to an introductory article: [terminal commands](https://www.techrepublic.com/article/16-terminal-commands-every-user-should-know/).",
              "instructor_notes": ""
            },
            {
              "id": 461314,
              "key": "e654b3d6-1d56-43c0-b465-4449170c81a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Menu\n\nThe embedded command line interface also has a menu in the bottom left corner.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 461315,
              "key": "c2d03bda-5c32-4a25-b902-64b84056ad28",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0797a8_menu/menu.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c2d03bda-5c32-4a25-b902-64b84056ad28",
              "caption": "",
              "alt": "",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 461316,
              "key": "b425df6f-28e3-4c7f-9534-98af74215139",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you click on the menu, you'll see two options:",
              "instructor_notes": ""
            },
            {
              "id": 461317,
              "key": "4128337b-2505-4bad-aa95-a39c5871a63b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0797f2_menuopen/menuopen.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4128337b-2505-4bad-aa95-a39c5871a63b",
              "caption": "",
              "alt": "",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 461318,
              "key": "27a9b87c-096c-42d2-921d-c324bd6f4b5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "REFRESH WORKSPACE will restart the workspace. It will not erase your work. \n\nHowever, RESET DATA will restart the workspace AND replace all of your files with the original workspace files. You will lose all of your work including any extra files you created in the workspace.\n\nIf you notice a red dot down in this corner, that means there have been updates made to the Workspace. If you'd like to work with the updated version of the Workspace, you will need to RESET DATA, but again, make sure you have separately saved down any work you want to keep to outside of the workspace!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 439793,
          "key": "42a25af4-bdce-4439-9c63-5e92bdf11603",
          "title": "Demo: Machine Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42a25af4-bdce-4439-9c63-5e92bdf11603",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 439798,
              "key": "d6c4766b-5d85-4f8b-a026-cd96b1d382e8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view089c5e02",
              "pool_id": "webterminal",
              "view_id": "089c5e02-14d4-4a6f-bf7a-7e3d57fa903e",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/demo_machine_code/instructions.md",
                      "/home/workspace/demo_machine_code/machine_code.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "actionButtonText": "Preview"
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 440678,
          "key": "83461538-5613-4083-95f2-362030df8180",
          "title": "Assembly Language",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "83461538-5613-4083-95f2-362030df8180",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 440679,
              "key": "e73d9bf4-f517-44d7-9448-bfd4c435a2d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Assembly Language\n\nIn between C++ and machine code there is actually another language called *assembly language*. Assembly language is a human readable low-level language that gets you even closer to the hardware than C++. \n\nYour compiler might not actually produce assembly language code and instead go directly to machine code. But you can still see assembly language code if you're curious. And there might be rare cases when you are trying to improve code efficiency and write assembly language directly in order to improve performance.\n\nIn the previous demonstration, you can use the following commands to output the assembly language code:\n```\ncd ~/home/workspace/demo_machine_code\ng++ -S machine_code.cpp\n\n```\n\nThis will output a file called machine_code.s, which you can then double-click to see its contents. \n\nAssembly language is not nearly as intuitive as C++, but it is still human readable. When you do something as simple as declaring and defining a variable,```int x = 5;```. the computer has to break this up into a series of steps like assigning a space in memory to the variable x and then placing the value 5 into the assigned space. \n\nYou can write out each of these steps directly in assembly language. For the purposes of this course, you do not need to be familiar with assembly language. But just looking at assembly code will prove to you that every line of C++ code has consequences in terms of efficiency. Look at the number of steps involved with just assigning the value to x.\n\nUnnecessary lines of code mean that the CPU will take more time to execute a program than what is actually needed.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 436633,
          "key": "b7dc319d-9a99-4198-8942-2445a87d12e1",
          "title": "Binary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b7dc319d-9a99-4198-8942-2445a87d12e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461395,
              "key": "b0f33a5a-dd76-48ca-a0f1-31d60b5664b9",
              "title": "03 L Binary V1 RENDER V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "K6CpHxnhc2s",
                "china_cdn_id": "K6CpHxnhc2s.mp4"
              }
            },
            {
              "id": 439851,
              "key": "e11e1115-ef7d-4669-a297-c515b2dcddec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How much space do my variables use?\n\nThe [standard that defines C++](https://isocpp.org/std/the-standard) specifies the minimum number of bytes required for each variable type. For instance, an integer is guaranteed to have at least 2 bytes or 16 bits.\n\nThat does not mean your computer will use 16 bit integers by default. The default number of bits will depend on how your computer system was designed. An int variable might be 16 bits on some systems but 32 bits on other systems. You can get more information at this [link](http://en.cppreference.com/w/cpp/language/types).\n\nAlthough the exercises later in this lesson will focus on increasing the speed of your code, you might find yourself at other times trying to optimize for memory use as well. The more comfortable you are with how your computer works, the more tools you will have for optimization. ",
              "instructor_notes": ""
            },
            {
              "id": 439857,
              "key": "c65c2b97-052f-48ad-aee6-78464ab3e1bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## All Variables are Binary\n\nC++ stores all variables in multiples of bytes:\n* a char is 1 byte\n* a 16-bit integer would be 2 bytes\n* a 32-bit integer would be 4 bytes\n* a 32-bit float would be 4 bytes\n\nThus all variables are represented by binary number. A 32-bit integer and a 32-bit float number take up the same amount of space; they would both be represented by a series of thirty-two 0s and 1s. ",
              "instructor_notes": ""
            },
            {
              "id": 439856,
              "key": "041475f9-7ce3-46f1-bb07-55a033b68ce9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How Bytes Limit Value Ranges\n\nIn C++, your variables will take up either 8, 16, 32, or 64 bits of memory, which are 1, 2, 4, and 8 bytes respectively. \n\nThe number of bytes put a limit on the minimum and maximum values that your variables can hold. As mentioned in the video, a 32 bit integer can have a maximum value of 4,294,967,295; however, if a variable might take on either a positive or negative value, then you need to use one bit to represent the variable's sign. This leaves 31 bits to represent the integer giving a max value of  2,147,483,647.\n\nLikewise, 32-bit floats can only contain about seven decimal places whereas 64-bit doubles can have about 15. The explanation for how floats are stored is a bit complex; however, you can imagine that a fixed number of bits puts a limit on the amount of decimal places that can be kept. In fact, you'll see this in an upcoming demo.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 439852,
              "key": "f8a991f3-612b-4ea9-a380-a99dd4c7fd4e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Is my system 32 bit or 64 bit?\n\nYour CPU probably either has a 32-bit architecture or a 64-bit architecture. That means the CPU was designed to work well with storing and manipulating information in 32-bit chunks versus 64 bit chunks.\n\nIf your CPU uses a 32-bit architecture, you can still create 64-bit variables in your programs as long as your compiler has this feature. But, the code will most likely run more slowly than using a 64-bit architecture with 64-bit variables. On a 32 bit system, the compiler has to create extra instructions to move and do math on 64-bit variables.\n\nIf you'd like to see whether your computer has a 32-bit or 64-bit system, here are instructions for:\n* [windows](https://support.microsoft.com/en-us/help/827218/how-to-determine-whether-a-computer-is-running-a-32-bit-version-or-64)\n* [mac](https://apple.stackexchange.com/questions/12666/how-to-check-whether-my-intel-based-mac-is-32-bit-or-64-bit)\n\n",
              "instructor_notes": ""
            },
            {
              "id": 440700,
              "key": "00175c33-ee94-4d1f-9dfb-167a9269854f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz",
              "instructor_notes": ""
            },
            {
              "id": 439862,
              "key": "5c29dda6-3d97-426e-ba65-1a5e376bd7bb",
              "title": "Binary Calculations",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5c29dda6-3d97-426e-ba65-1a5e376bd7bb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following is the 8-bit binary representation of the decimal number 63?",
                "answers": [
                  {
                    "id": "a1508889469047",
                    "text": "00011111",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889494676",
                    "text": "00111111",
                    "is_correct": true
                  },
                  {
                    "id": "a1508889495339",
                    "text": "111111",
                    "is_correct": false
                  },
                  {
                    "id": "a1508889496203",
                    "text": "11111100",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 439946,
              "key": "33c939ef-7861-4707-8974-c08c4db8828e",
              "title": "Binary to Integer",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "33c939ef-7861-4707-8974-c08c4db8828e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What integer is represented by the 16-bit binary number:\n00100100 10110110",
                "answers": [
                  {
                    "id": "a1508963640001",
                    "text": "11510",
                    "is_correct": false
                  },
                  {
                    "id": "a1508963737538",
                    "text": "37592",
                    "is_correct": false
                  },
                  {
                    "id": "a1508963738041",
                    "text": "25783",
                    "is_correct": false
                  },
                  {
                    "id": "a1508963738539",
                    "text": "9398",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 439967,
          "key": "12fe4cba-0693-472c-b770-484cb81ebc5e",
          "title": "Demo: Binary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "12fe4cba-0693-472c-b770-484cb81ebc5e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 439968,
              "key": "59e03bd6-a962-4aa8-8301-1b21cecb9f5d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view089c5e02",
              "pool_id": "webterminal",
              "view_id": "83051e2a-8fa6-49f6-80d8-f76df85fd228",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/demo_binary/instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "actionButtonText": "Preview"
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 439977,
          "key": "51f55d6d-84fe-4d03-9448-2357ab3ef2e6",
          "title": "Demo: Binary Floats",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51f55d6d-84fe-4d03-9448-2357ab3ef2e6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 439978,
              "key": "c20a6721-0108-4e5b-a887-9d3a9d2758d7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view089c5e02",
              "pool_id": "webterminal",
              "view_id": "ea27a526-9995-473f-847a-f4edb30886fe",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/demo_floats/instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "actionButtonText": "Preview"
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 419976,
          "key": "474d51c9-7199-440e-874c-b58904edb98d",
          "title": "Memory and the CPU",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "474d51c9-7199-440e-874c-b58904edb98d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461396,
              "key": "84bdd9c5-fa49-4e24-9cad-9db856da2186",
              "title": "04 L C   And RAM V1 RENDER V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "60jEbKV1UOI",
                "china_cdn_id": "60jEbKV1UOI.mp4"
              }
            },
            {
              "id": 440409,
              "key": "78da00a2-4fe6-42ed-8a40-1b5561362e69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Stack vs Heap\n\n##### Stack\nWhen you declare a variable in C++, the variable will automatically be placed on the stack. Once a function terminates, for example the main function, then the variable is removed from the stack; however, in terms of the code you've written so far in the nanodegree, there is one exception. The elements in a vector actually get placed on the heap, but the compiler still  manages the allocation and deallocation of memory for you. \n\nThe stack removes variables by the \"last in first out\" rule; in other words, the last variable to be placed on the stack will be the first variable removed from the stack. This makes sense given that when a function is called, variables will be allocated to memory and then when the function terminates, variables will be removed from memory.\n\nThe stack also tends to be relatively small: perhaps 1 MB depending on your system. One advantage to keeping the stack small is for multi-threading. Let's say you only have 50 MB of RAM for the stack. Your CPU could do about 50 simultaneous tasks because of the smaller stack size. But because the stack is small, the stack can run out of memory; this is called stack overflow.\n\n#### Heap\nThe heap, on the other hand, is only limited by the amount of RAM currently available. So variables that hold a lot of memory have to go on the heap. But when you declare a variable on the heap, you are responsible for removing the variable from memory. If you don't, then it becomes more likely that your program will run out of memory before the program terminates. And then your program will crash.\n\nThe heap also tends to be slower; a compiler organizes the stack for you and knows where the next available memory slot is; on the other hand, a program might have to search for an empty spot to put a variable on the heap.\n\nIn relation to code efficiency, only use the heap when necessary. Although you will not need to use the heap in the nanodegree, you'll at least become familiar with the syntax so that you can recognize when a program is using the heap. In the next section, you'll also see a demonstration about the stack versus the heap.",
              "instructor_notes": ""
            },
            {
              "id": 440561,
              "key": "521bfcfe-5ffe-47fc-902e-b1316db3befd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Variables and Memory\n\nVariables make programming much easier. Imagine what programming would be like if variables did not exist; you would have to determine\n* determine how many bytes your variable needs\n* find an available address to store the value\n* make sure there are enough consecutive bytes available for storage\n* you would also have to remember what value was stored at each hexadecimal address so that you could retrieve the right value as needed.\n\nBut with variables, the compiler does all of the memory management for you. And you can use descriptive names to help you remember what is contained in each variable.\n\nThis is essentially what the compiler is doing for you in terms of variables and memory management; without you having to think about it, the compiler efficiently finds space for your variables and keeps track of their location.",
              "instructor_notes": ""
            },
            {
              "id": 440563,
              "key": "7151b4a3-580e-4066-a223-2d9877d3c229",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Dynamic Memory\n\nTo understand the next demo, you need to know about dynamic memory allocation and pointers. \n\nDynamic memory allocation refers to when you, the programmer, assign variables to memory manually. These variables will go on the heap rather than the stack. \n\nThe opposite of dynamic memory allocation would be static memory allocation. You've already been using static memory in your programs; when you declare variables in your programs, the compiler knows ahead of time how much memory each variable will need; the amount of memory your variables need does not change as the program executes, so this memory is \"static\".  The stack is used for static memory allocation. \n\nThe compiler doesn't know how much memory will be needed for dynamically allocated variables; hence, dynamic memory gets allocated when you execute your programs. Dynamically allocated variables go on the heap.\n\nTo use dynamic memory, you need to be familiar with **pointers** and the **new** and **delete** C++ syntax. A pointer is a special type of variable that holds a memory address rather than a value. You don't need to know how to use pointers, but they show up in the demo in the next part of the lesson.\n\nHere is an example of dynamic memory allocation using pointers:",
              "instructor_notes": ""
            },
            {
              "id": 440670,
              "key": "5e27326d-3efa-4bb8-a28a-5aa1481f4649",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```c++\n\n#include <iostream>\n\nint main() {\n    \n    // asterisk syntax creates a pointer variable, which can hold a memory address\n    int * pointervariable;\n    \n    // new is used to create a variable on the heap. This line\n    // assigns an addresss to pointervariable and reserves enough space\n    // told hold an integer.\n    pointervariable = new int;\n    \n    // Pointer variable holds an addresss. The address allows placing a value in\n    // memory at the address.\n    *pointervariable = 10;\n    \n    std::cout << \"pointer value:  \" << *pointervariable << \"\\n\";\n    std::cout << \"pointer address: \" << pointervariable << \"\\n\";\n    \n    // remove pointervariable from the heap\n    delete pointervariable;\n    pointervariable = NULL;\n    \n    return 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 440671,
              "key": "35724a3d-3154-4974-95e6-c8e4f2161c6f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "With the result outputting something like:\n\n```\npointer value: 10\npointer address: 0x1004053c0\n```\n\nalthough the exact memory address will differ from machine to machine. The pointer address is a [hexadecimal number](https://en.wikipedia.org/wiki/Hexadecimal) representing the location in memory.\n\nThe new operator assigns memory to the heap. You are are responsible for removing the variable when you are done with it, which is what the delete operator is for. Setting the pointer to NULL is good practice.\n\nIf you do not remove the variable, your program could run out of memory during execution; some operating systems might delete memory from the heap when your program terminates but some might not. Forgetting to remove dynamically allocated variables is called a **memory leak**.\n\nNewer versions of C++ also include [smart pointers](https://msdn.microsoft.com/en-us/library/hh279674.aspx) that delete automatically when the program terminates.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 457439,
              "key": "02b363ba-dd87-484a-853b-4d317cf55303",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next, you'll see a demonstration of static versus dynamic memory allocation.",
              "instructor_notes": ""
            },
            {
              "id": 440676,
              "key": "d0ba0481-0530-4765-8c37-8460a1b4c08b",
              "title": "Stack vs Heap",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d0ba0481-0530-4765-8c37-8460a1b4c08b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When should you use dynamic memory allocation over static memory allocation?",
                "answers": [
                  {
                    "id": "a1509395166642",
                    "text": "If you want the compiler to manage memory allocation and deallocation for you ",
                    "is_correct": false
                  },
                  {
                    "id": "a1509395168587",
                    "text": "If your variable uses more memory than what is available in the stack",
                    "is_correct": true
                  },
                  {
                    "id": "a1509395169842",
                    "text": "If you want to increase the speed of your programs",
                    "is_correct": false
                  },
                  {
                    "id": "a1509395170498",
                    "text": "If you want to share variables across different functions or parts of a program",
                    "is_correct": true
                  },
                  {
                    "id": "a1509402118035",
                    "text": "Whenever you want to use pointers",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 440677,
          "key": "b32f47ec-7807-4853-988c-095b949a5282",
          "title": "Demo: Stack vs Heap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b32f47ec-7807-4853-988c-095b949a5282",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 440701,
              "key": "99df7b21-f009-471e-b107-5eee26fd4de2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view089c5e02",
              "pool_id": "webterminal",
              "view_id": "60d7d369-3f42-4db5-872b-0a4a469bf0cd",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/demo_stack_heap/instructions.md",
                      "/home/workspace/demo_stack_heap/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "actionButtonText": "Preview"
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 419979,
          "key": "20a29fb0-c56e-4bb4-9399-9514cbddd43c",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "20a29fb0-c56e-4bb4-9399-9514cbddd43c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 462458,
              "key": "26852800-d81c-47af-8b8b-b18536bace9c",
              "title": "C   Opt 05 L V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rTtZVyWxYG8",
                "china_cdn_id": "rTtZVyWxYG8.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}