{
  "data": {
    "lesson": {
      "id": 395828,
      "key": "e0a7f9b9-5d4f-4594-84d6-a50cf0587b9e",
      "title": "Practical C++",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn how to write C++ code on your own computer and compile it into a executable program without running into too many compilation errors.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/e0a7f9b9-5d4f-4594-84d6-a50cf0587b9e/395828/1587647941521/Practical+C%2B%2B+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/e0a7f9b9-5d4f-4594-84d6-a50cf0587b9e/395828/1587647939116/Practical+C%2B%2B+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 395829,
          "key": "ac0e915b-da72-4c12-bbb7-67416c0db311",
          "title": "Introduction to Compilation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ac0e915b-da72-4c12-bbb7-67416c0db311",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425392,
              "key": "ca17b65e-c560-4806-9ae6-990b8b640776",
              "title": "Introduction To Compilation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dyzGEB8YDGg",
                "china_cdn_id": "dyzGEB8YDGg.mp4"
              }
            },
            {
              "id": 402749,
              "key": "85fa8660-77d0-4762-b223-643a9061eb0e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Thus far, you've been writing code within the Udacity classroom. But you will also want to be able to run your programs locally on your own computer. This brings up another difference between Python and C++. You learned about the first major difference at the beginning of the C++ lesson; Python is dynamically typed while C++ is statically typed. Another major difference is that Python is an **interpreted language** whereas C++ is a **compiled language**.",
              "instructor_notes": ""
            },
            {
              "id": 402750,
              "key": "47670c5b-a57d-4a02-96a6-39a4f843b697",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When you write code in Python or C++, your computer can't actually understand the code that you are writing. But we humans can read and understand these languages, so they are convenient for us to code in.\n\nYour code needs to be translated into a language that your CPU understands. Interpreted languages and compiled languages get translated in different ways. When you run a Python program, there is a translator (ie an interpreter), that reads a line of your code, translates a line of code for the CPU, and then executes your  code line on the CPU. Then the next line gets translated and executed. Then the next, etc. The reality is a bit more complex, but that is the gist of an interpreted language like Python.\n\nA compiled language, on the other hand, translates all of your code into the CPU's language. And then your code gets executed. So when running a C++ program, there is an extra step where you first compile your code and then a second step where you execute your code. Python, on the other hand, only has the execution step.\n\nThe C++ code you have been writing in the classroom actually is being compiled first and then executed, but it's happening behind the scenes. If you want to run your C++ programs locally on your computer, you're going to need to first compile the code and then execute it yourself.",
              "instructor_notes": ""
            },
            {
              "id": 402751,
              "key": "d1a71034-fcb9-452f-8003-96a122532cb2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the next part of the lesson, you will get your own computer ready for compiling and executing C++ programs.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 402742,
          "key": "6824f07e-88cc-4cc2-8fc8-ba8affa60373",
          "title": "Running Code Locally",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6824f07e-88cc-4cc2-8fc8-ba8affa60373",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 496054,
              "key": "cdf37340-9f28-42fe-a2be-586cef2bbd34",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Running Code Locally\n\nIf you haven't already tried running your C++ code locally, now's the time to get things working. In the C++ section, we mentioned how to get code to run locally on your computer. Here are the instructions again for your reference:\n\nHere are some suggested programs for writing and executing your code locally:\n* [Sublime Text](https://www.sublimetext.com/) as a general text editor\n* Download an IDE (Integrated Development Environment) such as [Xcode](https://developer.apple.com/xcode/downloads/) (Mac only), [Visual Studio](https://www.visualstudio.com/downloads/) or any other IDE.\n\n### Detailed Setup Instructions\n\nBig thanks to Michael Ikemann! Michael is a student in this Nanodegree and put together some **exceptionally** detailed documentation to help you get started with C++.\n\n* [Windows C++ Setup Guide](https://docs.google.com/document/d/1PA3YcIKpANBZuHLX6tz7bVw60ug_DM1_V_yFKyrMP-s/edit?usp=sharing)\n * Per student Tarun, the guide document for IDE setup suggests moving the .sln file to parent directory, along with the .vcproj file. To avoid errors, the .sln file needs to be hand modified with updated path.\n* [Mac C++ Setup Guide](https://docs.google.com/document/d/1FoIc9X0NcM-0y0dgXCzJcpu5lVXGFqS62mb1ABLDT1M/edit)\n\nBelow you'll find further instructions as well, although Michael's documents should be enough to get things running.",
              "instructor_notes": ""
            },
            {
              "id": 402752,
              "key": "e0d37645-9faf-4dca-870b-bc314a47f62a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Compiling and Executing C++ Code\n\nIf you are on a Windows, Mac, or Linux machine, the basic process is going to be the same; you will compile your code and then execute the compiled code. But the details of how to do this are slightly different on different machines and operating systems. \n\nAnd there are two different ways you can compile and execute your code:\n* using the windows console/mac terminal/linux terminal\n* using an IDE (Integrated Development Environment), which is a software program that makes it easier to write, organize, compile and run your code.",
              "instructor_notes": ""
            },
            {
              "id": 402757,
              "key": "21281044-eb0d-4766-bd12-0b529e7ce646",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Running your Code through the Console or Terminal\n\nThis is the quickest way to get started compiling and executing your code. ",
              "instructor_notes": ""
            },
            {
              "id": 402758,
              "key": "9f7ba5de-bcef-4c44-81af-1a77f849a560",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### For Windows\n\nYou will first need to download and install the [Visual C++ Build Tools](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=15), which are provided by Microsoft. The installation process might vary depending on what version of windows you are using. The microsoft website has a helpful guide about how to make sure the installation went correctly. The guide also explains how to compile and run your code: [microsoft instructions](https://docs.microsoft.com/en-us/cpp/build/walkthrough-compiling-a-native-cpp-program-on-the-command-line).\n\nIf the Visual C++ Build Tools are installed, you should be able to compile and execute your code from the console.  For example, if you have a main.cpp, you would open the console and navigate to the directory with the file. \n\nYou will see that the microsoft tutorial suggests compiling your code with the following command:\n```\ncl /W4 /EHsc main.cpp\n```\n\nThe /W4 and /EHsc are options that will compile your code with warnings and [error handing](https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model).\n\nThe compiler outputs an .obj file, which contains the instructions for the CPU. You will also see a .exe file that will get your code running.\n\nNow typing\n```\nmain\n```\n\nat the command prompt should get your program running.\n\nIf your program has multiple .cpp files, then you compile with:\n```\ncl /W4 /EHsc file1.cpp file2.cpp file3.cpp\n```\n\nThe name of the .obj and .exe files will be file1.",
              "instructor_notes": ""
            },
            {
              "id": 402762,
              "key": "f81e5257-881e-4adf-8ebe-160626539bcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### For Mac\n\nDepending on your OS version, the installation process will be different. In general, you will need to download the \"command line developer tools\" from the Apple developer website. \n\nAs a first step, see if you already have a compiler on your system called **g++**. Open the Terminal application, and type\n```\ng++\n```\n\nIf g++ is installed, you should get an error message like `no input files`. If g++ is not installed and you are using a relatively newer version of Mac OS,  a dialogue box will pop up asking you if you would like to install the command line tools. Click \"Install\". \n\nHowever, on older Mac OS systems, you'll need to go to the Apple developer's website and download the command line developer tools. Go to this [link](https://developer.apple.com/download/). You will need to create an Apple ID if you do not already have one. Enter your Apple ID and password. \n\nOn the downloads page, there is a search box in the top left corner. Search for \"command line developer tools\". Then download and install the developer tools for your OS version. \n\nNow go back to the Terminal and type\n```\ng++\n```\n\nYou should now get an error message `no input files`. \n\nTo compile a program you would type:\n```\ng++ filename.cpp\n```\n\nor with multiple .cpp files:\n```\ng++ filename1.cpp filename2.cpp filename3.cpp\n```\n\nThe compiler will create an executable file named `a.out`. To run your program, in terminal type:\n```\n./a.out\n```",
              "instructor_notes": ""
            },
            {
              "id": 402764,
              "key": "888a3a4e-5bd3-43aa-89dc-afa94c64e38a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### For Linux Ubuntu\n\nThe g++ compiler might already be on your system. If you are using Ubuntu, open Terminal and type:\n```\ndpkg --list | grep compiler\n\n```\n\nYou will see a list of compilers. Check if g++ is in the list. If not, you can install g++ by typing:\n```\nsudo apt-get install g++\n```\n\nThe commands to compile and run a program are the same as for Mac:\n```\ng++ filename.cpp\n./a.out\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 402765,
              "key": "9e3c1bbf-36db-48e3-b9cf-4f45afd91540",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using an IDE\n\nAnother option is to download an IDE (Integrated Development Environment) to help write, organize, debug, compile and execute your code.\n\nMicrosoft provides an IDE called Visual Studio, which you can download here: [Visual Studio](https://www.visualstudio.com/). Up until recently, Visual Studio was only available for Windows. But there is also a Mac version as well.\n\nFor Mac users, Apple also provides an IDE called Xcode, which you can download [here](https://developer.apple.com/xcode/). \n\nYou can use either of these IDEs to help you develop your C++ programs.\n\nFor Linux Ubuntu users, there are a number of free IDEs available such as [NetBeans](https://netbeans.org/features/cpp/index.html), [Code::Blocks](http://www.codeblocks.org), [Eclipse](https://www.eclipse.org/cdt/), and [CodeLite](https://codelite.org/).\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468457,
          "key": "0ab51739-9717-4a2c-bb25-b36bfa578d02",
          "title": "C++ Versions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0ab51739-9717-4a2c-bb25-b36bfa578d02",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 468471,
              "key": "c85d8207-b070-436d-8957-ecb896c31408",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Versions of C++\n\nThe [International Organization for Standardization](https://www.iso.org/home.html) publishes standards for the C++ language. Every few years the standard is updated with new features and syntax. The C++ standards are  written documents providing guidelines for what the C++ language should be able to do and what the language looks like.\n\nThe responsibility for implementing a standard is left to the company, person or team that designs a compiler; hence, not all compilers implement all features. And some compilers might implement a feature differently.\n\nThere are currently five published C++ standards with the earliest standard called **C++98** and the most recent standard **C++17**. The number designates the year in which the standard was published such as 1998 and 2017.\n\nThus far, the classroom has been compiling your code with the oldest standard: **C++98**. We have used C++98 so that you could get the basics of C++ down without worrying about advanced features.\n\nAs an example of a more advanced features, **C++11**, allows you to initialize a vector with the following syntax:\n\n```\nvector<int> myvector = {5, 4, 9, 1, 10}\n```\n\nThere is generally a lag of a few years between publication of a standard and industry adoption. ",
              "instructor_notes": ""
            },
            {
              "id": 468475,
              "key": "4ce2f2a9-0ea4-474d-ad32-e4aa5edc4522",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# GCC Compiler\n\nThe classroom uses a compiler called gcc. Thus far, we have been compiling your code for you when you hit the \"Test Run\" button. In the \"Performance Programming C++\" module, you will use a different interface for writing, compiling and running your code. This interface also uses the gcc compiler.\n\nIn the classroom, gcc compiles with C++98 by default. As you will see, you can use the command line to tell gcc what version of C++ to use:\n```\ng++ -std=c++11 main.cpp\n```\n\nYou might find different behavior on your system because of the compiler you are using or because of your compiler options.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 468476,
              "key": "5a95ea93-a0d5-4a1b-a7cc-24e25025e322",
              "title": "C++ Versions",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a95ea93-a0d5-4a1b-a7cc-24e25025e322",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Rank the C++ standards from oldest to newest"
                },
                "concepts_label": "Order",
                "answers_label": "C++ Version",
                "concepts": [
                  {
                    "text": "1",
                    "correct_answer": {
                      "id": "a1512428854897",
                      "text": "C++98"
                    }
                  },
                  {
                    "text": "2",
                    "correct_answer": {
                      "id": "a1512428884923",
                      "text": "C++03"
                    }
                  },
                  {
                    "text": "3",
                    "correct_answer": {
                      "id": "a1512428890362",
                      "text": "C++11"
                    }
                  },
                  {
                    "text": "4",
                    "correct_answer": {
                      "id": "a1512428941408",
                      "text": "C++14"
                    }
                  },
                  {
                    "text": "5",
                    "correct_answer": {
                      "id": "a1512428947064",
                      "text": "C++17"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512428884923",
                    "text": "C++03"
                  },
                  {
                    "id": "a1512428890362",
                    "text": "C++11"
                  },
                  {
                    "id": "a1512428947064",
                    "text": "C++17"
                  },
                  {
                    "id": "a1512428941408",
                    "text": "C++14"
                  },
                  {
                    "id": "a1512428854897",
                    "text": "C++98"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 402744,
          "key": "416f97dc-b64c-4562-a9fe-a886d0417f4b",
          "title": "Structuring Functions and File Organization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "416f97dc-b64c-4562-a9fe-a886d0417f4b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403065,
              "key": "0682253d-c050-4385-9ed1-80d8abf7c3bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Structuring your Functions\n\nIn the last lesson, you learned two different ways for declaring and defining functions: \n* declaring functions above main() and defining functions below main\n* declaring and defining functions simultaneously above main\n\nAs your C++ programs get longer and more complex, you might want to separate your code into multiple files. Keeping function definitions and declarations separate will help you with splitting and organizing your code.\n\nFor example, take a look at this code from the functions quiz in the previous lesson.",
              "instructor_notes": ""
            },
            {
              "id": 403066,
              "key": "0964399c-8cd9-4369-8675-03db3af4e63a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```c++\n#include <iostream>\n\nfloat distance(float velocity, float acceleration, float time_elapsed);\n\nint main() {\n        \n    std::cout << distance(3, 4, 5) << std::endl;  \n    std::cout << distance(7.0, 2.1, 5.4) << std::endl;\n    \n    return 0;   \n}\n\nfloat distance(float velocity, float acceleration, float time_elapsed) {\n    return velocity*time_elapsed + 0.5*acceleration*time_elapsed*time_elapsed;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 403094,
              "key": "d9f3eb60-29be-4980-a759-59fad841764e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Instead of putting everything into a main.cpp like in the previous quiz, the code could be organized into two files. Check out the code below and hit the \"Test Run\" button.",
              "instructor_notes": ""
            },
            {
              "id": 403081,
              "key": "223028e2-4094-48b8-84a7-9d62aaa35624",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "223028e2-4094-48b8-84a7-9d62aaa35624",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5251484555018240",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n\nfloat distance(float velocity, float acceleration, float time_elapsed);\n\nint main() {\n\n    std::cout << distance(3, 4, 5) << std::endl;  \n    std::cout << distance(7.0, 2.1, 5.4) << std::endl;\n    \n    return 0;   \n}",
                    "name": "main.cpp"
                  },
                  {
                    "text": "float distance(float velocity, float acceleration, float time_elapsed) {\n    return velocity*time_elapsed + 0.5*acceleration*time_elapsed*time_elapsed;\n}",
                    "name": "distance.cpp"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 403093,
              "key": "865b65a9-d0a9-41a1-9f72-1bf6ae914bf2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Behind the scenes, both main.cpp and distance.cpp are being compiled. This is happening on the backend of the classroom, so you are not seeing the compilation happen. \n\nBut if you were to run this program locally, you could open a terminal and navigate to the folder containing both files. Typing something like\n```\ng++ main.cpp distance.cpp\n./a.out\n```\n\nwould compile both files together and then execute the program.\n\nBecause you have defined your function in a separate file outside of main.cpp, you can more easily re-use the function in other parts of your code.\n\nNotice that you still had to declare the distance function at the top of main.cpp to be able to use the function.",
              "instructor_notes": ""
            },
            {
              "id": 403095,
              "key": "8362ae27-7e09-42a1-b592-fe545aa816ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Header Files\n\nThe function declaration \n```c++\nfloat distance(float velocity, float acceleration, float time_elapsed);\n```\nis oftentimes put into its own file as well. The declaration is kept in what's called a **header** file because the header is the information above the main() function. Header files generally have either a .h or .hpp extension. Here is the same code above but with the function declaration in a header file. If you click the \"Test Run\" button, you'll see that this code works as well:",
              "instructor_notes": ""
            },
            {
              "id": 403096,
              "key": "a67df453-e616-4a48-a460-980ddcbb1322",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a67df453-e616-4a48-a460-980ddcbb1322",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5441747848134656",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include \"distance.h\"\n\nint main() {\n\n    std::cout << distance(3, 4, 5) << std::endl;  \n    std::cout << distance(7.0, 2.1, 5.4) << std::endl;\n    \n    return 0;   \n}",
                    "name": "main.cpp"
                  },
                  {
                    "text": "float distance(float velocity, float acceleration, float time_elapsed) {\n    return velocity*time_elapsed + 0.5*acceleration*time_elapsed*time_elapsed;\n}",
                    "name": "distance.cpp"
                  },
                  {
                    "text": "float distance(float velocity, float acceleration, float time_elapsed);",
                    "name": "distance.h"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 403097,
              "key": "95905b3c-6b4c-4fde-9c6d-d346ecfd0107",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The code line \n```c++\n#include \"distance.h\"\n```\n\nwill paste the contents of distance.h into main.cpp.\n\nNow let's say you wanted to reuse your distance function in a different file. All you have to do is declare the function at the top of your new file with an include statement:\n```c++\n#include \"distance.h\"\n```\n\nand you can use the function in another part of your program. \n\nOrganizing your code into different .cpp files separates out the implementation from the declaration. Furthermore, using header files means that you do not have to remember what the function declaration looked like because you can include it with the simple syntax of \n```\n#include \"distance.h\"\n```\n\nTo compile the code, you only need to compile the .cpp files but not the .h file:\n```\ng++ main.cpp distance.cpp\n```",
              "instructor_notes": ""
            },
            {
              "id": 403101,
              "key": "c132405e-0e74-4c07-a803-f49618ce518a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### File Naming\n\nNaming conventions dictate that the header file and associated cpp file have the same name. Therefore it's clear that distance.h contains the header declarations for distance.cpp. You'll also notice that the function name itself was called distance(). So the function name, .cpp and .h files all match.\n\nThese are naming conventions, so your C++ code will still compile if you do not follow these conventions; however, it's highly recommended to stick with these conventions.",
              "instructor_notes": ""
            },
            {
              "id": 403099,
              "key": "c1ba2e4a-a795-46c7-a01e-dd4a440d964c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Include syntax\n\nYou might be wondering why there are two different types of include statements:\n```c++\n#include <iostream>\n#include \"distance.h\"\n```\n\nThe include statement with quotes tells the program to look for the distance.h file in the current directory. \n\nThe <> syntax will depend on your C++ environment. Generally, environments are set up to look for the file where the C++ libraries are stored like the Standard Library.",
              "instructor_notes": ""
            },
            {
              "id": 403102,
              "key": "ad3f0876-b48d-4124-b762-7e8e1ff89dff",
              "title": "Files Type and Definition",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ad3f0876-b48d-4124-b762-7e8e1ff89dff",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "What type of code goes into each file type?"
                },
                "concepts_label": "Code",
                "answers_label": "File Type",
                "concepts": [
                  {
                    "text": "This file could contain function declarations.",
                    "correct_answer": {
                      "id": "a1505850649905",
                      "text": "function.h"
                    }
                  },
                  {
                    "text": "This file contains the part of the program that would call functions and output results.",
                    "correct_answer": {
                      "id": "a1505850671268",
                      "text": "main.cpp"
                    }
                  },
                  {
                    "text": "This file could contain a function definition.",
                    "correct_answer": {
                      "id": "a1505850676083",
                      "text": "function.cpp"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1505850671268",
                    "text": "main.cpp"
                  },
                  {
                    "id": "a1505850649905",
                    "text": "function.h"
                  },
                  {
                    "id": "a1505850676083",
                    "text": "function.cpp"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 402745,
          "key": "37473beb-8052-4abe-84f9-4cb3246dea5e",
          "title": "Input and Output",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "37473beb-8052-4abe-84f9-4cb3246dea5e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 402767,
              "key": "95f8dca6-d3dd-4722-8c76-2fa0c2e62c1c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Input and Output\n\nThere is one last topic to discuss before moving onto the C++ Object Oriented Programming Lesson. \n\nYou have already seen how to call a function and then output the results to the terminal using cout. As an example:\n```c++\nstd::cout << distance(3, 4, 5);\n```\n\nBut how do you get user input from the terminal? Or how do you input data from a file into your program or write out your results to a file?",
              "instructor_notes": ""
            },
            {
              "id": 402769,
              "key": "d67d19ec-09b7-4f7f-82c0-1fab3bcb1e38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## cin\n\nMuch like the Standard Library provides a function for outputting to the terminal, the library also provides a function for reading in data from the terminal. \n\nThis code demonstrates how to use cin:\n```c++\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n\n    int integerone; \n    int integertwo;\n\n\t// declare array and assign values\n    cout << \"Enter an integer between 1 and 100\" << endl;\n    cin >> integerone;\n\n    cout << \"Enter another integer between 1 and 100\" << endl;\n    cin >> integertwo;\n\n    // output the difference\n    cout << \"The difference between your two numbers is: \";\n    cout << integerone - integertwo << endl;\n\n\n    return 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 402770,
              "key": "b974887e-a23d-41de-8f63-0294952a167e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To see how this code works, you will need to put the code into a .cpp file and run the program locally. The classroom playground does not allow for user input.",
              "instructor_notes": ""
            },
            {
              "id": 468494,
              "key": "6c9550ac-9511-4eb4-973d-709e6b4e2b3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next, you will learn how to input data from an external file.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468479,
          "key": "3936cc0c-9e4e-4acb-830c-5bcceefe0e4e",
          "title": "Reading in Text Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3936cc0c-9e4e-4acb-830c-5bcceefe0e4e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 468495,
              "key": "88163249-1b67-4755-b96c-0f5e431b26bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Reading in Text Files\n\nThe Standard Library includes functionality for reading text files line by line. You can then parse each line of the text file one line at a time.\n\nSay, for example, you have a text file with numbers and commas representing a 3 by 4 matrix:\n```\n1, 6, 2, 10.5\n11, 15.2, 2, 21\n3, 9, 1, 7.5\n```\n\nYou want to read in this file and create a 2D vector to represent the matrix. Here is code to do this, and then below you can run the code to see that it works.\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n\n\t// initialize string variables for reading in text file lines \n\tstring line;\n\tstringstream ss;\n\n\t// initialize variables to hold the matrix\n\tvector < vector <float> > matrix;\n\tvector<float> row;\n\n\t// counter for characters in a text file line\n\tfloat i;\n\n\t// read in the file\n\tifstream matrixfile (\"matrix.txt\");\n\t\n\t// read in the matrix file line by line\n\t// parse the file\n\n\tif (matrixfile.is_open()) {\n\t\twhile (getline (matrixfile, line)) {\n\n\t\t\t// parse the text line with a stringstream\n\t\t\t// clear the string stream to hold the next line\n\t\t\tss.clear();\n\t\t\tss.str(\"\");\n\t\t\tss.str(line);\n\t\t\trow.clear();\n\t\t\t\n\t\t\t// parse each line and push to the end of the row vector\n\t\t\t// the ss variable holds a line of text\n\t\t\t// ss >> i puts the next character into the i variable. \n\t\t\t// the >> syntax is like cin >> some_value or cout << some_value\n\t\t\t// ss >> i is false when the end of the line is reached\n\n\t\t\twhile(ss >> i) {\n\t\t\t\trow.push_back(i);\n\t\t\t\t\n\t\t\t\tif (ss.peek() == ',' || ss.peek() == ' ') {\n\t\t\t\t\tss.ignore();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// push the row to the end of the matrix\n\t\t\tmatrix.push_back(row);\n\t\t}\n\n\t\tmatrixfile.close();\n\n\t\t// print out the matrix\n\t\tfor (int row = 0; row < matrix.size(); row++) {\n\t\t\tfor (int column = 0; column < matrix[row].size(); column++) {\n\t\t\t\tcout << matrix[row][column] << \" \" ;\n\t\t\t}\n\t\t\tcout << endl; \n\t\t}\n\t}\n\n\telse cout << \"Unable to open file\";\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 468496,
              "key": "388dd849-d96e-49ea-9ed9-e683564427eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is a demonstration of how to read in data from a text file. The code reads in a tile file that contains data for a matrix. Then the code outputs the matrix to the terminal display. Read through the code to try to figure out what it does. Then run the code by pressing the \"Test Run\" button. \n\nBelow the demo, there is an explanation of what the code is doing.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 468499,
              "key": "a2201761-fa9d-48b2-a484-c633c0e1b932",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a2201761-fa9d-48b2-a484-c633c0e1b932",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4650514067881984",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n\n    // initialize string variables for reading in text file lines \n    string line;\n    stringstream ss;\n\n    // initialize variables to hold the matrix\n    vector < vector <float> > matrix;\n    vector<float> row;\n\n    // counter for characters in a text file line\n    float i;\n\n    // read in the file\n    ifstream matrixfile (\"matrix.txt\");\n\n    // read in the matrix file line by line\n    // parse the file\n\n    if (matrixfile.is_open()) {\n        while (getline (matrixfile, line)) {\n\n            // parse the text line with a stringstream\n            // clear the string stream to hold the next line\n            ss.clear();\n            ss.str(\"\");\n            ss.str(line);\n            row.clear();\n\n            // parse each line and push to the end of the row vector\n            while(ss >> i) {\n                row.push_back(i);\n\n                if (ss.peek() == ',' || ss.peek() == ' ') {\n                    ss.ignore();\n                }\n            }\n\n            // push the row to the end of the matrix\n            matrix.push_back(row);\n        }\n\n        matrixfile.close();\n\n        // print out the matrix\n        for (int row = 0; row < matrix.size(); row++) {\n            for (int column = 0; column < matrix[row].size(); column++) {\n                cout << matrix[row][column] << \" \" ;\n            }\n            cout << endl; \n        }\n    }\n\n    else cout << \"Unable to open file\";\n\n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "1, 6, 2, 10.5\n11, 15.2, 2, 21\n3, 9, 1, 7.5",
                    "name": "matrix.txt"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 468500,
              "key": "8ca27f4e-c894-45ba-ab30-a9053e2d7700",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are two parts of the code that you haven't seen yet: fstream and sstream. Both of these files are part of the C++ Standard Library.\n\nfstream provides functions and classes for reading in and outputting files. \n\nThis line of code reads in the file \"matrix.txt\" and then creates an object called \"matrixfile\" that you can use for reading in the text file:\n```\n    ifstream matrixfile (\"matrix.txt\");\n```\n\nThe if statement that follows checks that the file opened correctly:\n```\n\tif (matrixfile.is_open()) {\n```\n\nand then a while loop reads the file one line at a time. Each line is placed into a variable called \"line\":\n```\n\tif (matrixfile.is_open()) {\n\t\twhile (getline (matrixfile, line)) {\n```\n\nIf you look at the text file, each line in this case is a string consisting of floats, commas and spaces. For example, \"1, 6, 2, 10.5\".\n\nThe sstream file in the Standard Library provides functionality for manipulating and parsing the string. In the code, you'll see that first a sstream object was declared and then later the ss object was used to cycle through and parse each line of the text file:\n```\nstringstream ss;\n\t\n....\n\nss.clear();\nss.str(\"\");\nss.str(line);\n\nwhile(ss >> i) {\n\trow.push_back(i);\n\t\n\tif (ss.peek() == ',' || ss.peek() == ' ') {\n\t\tss.ignore();\n\t}\n}```\n\nIn other words, the code finds a float number and appends the number to the vector called row. The line `ss.peek()` looks at the next character to see if it is a comma or a space and ignores commas or spaces.\n\nNote as well that when you are done with reading in the file, it's a good habit to close the file.\n```\nmatrixfile.close();\n```\n\nIf you ever write a programming that opens many files simultaneously and never closes them, your program could crash.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468502,
          "key": "57ac48e1-6e63-473c-bb5d-55e21af51f57",
          "title": "Outputting to Text Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "57ac48e1-6e63-473c-bb5d-55e21af51f57",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 468504,
              "key": "fb901ca6-3271-408f-a4f6-7b95fca42c05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Outputting to Text Files\n\nMuch like how you can input data from a file, you can also output data to a file. Say you have a matrix and you want to save the results to a text file. You'll see that the code for outputting the matrix to a file looks quite similar to the code for outputting the matrix to the terminal.\n\nYou will need to run this code locally in order to see the outputted text file.\n\n```\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n\n\t// create the vector that will be outputted\n\tvector < vector <int> > matrix (5, vector <int> (3, 2));\n\tvector<int> row;\n\n\t// open a file for outputting the matrix\n\tofstream outputfile;\n\toutputfile.open (\"matrixoutput.txt\");\n\n\t// output the matrix to the file\n\tif (outputfile.is_open()) {\n\t\tfor (int row = 0; row < matrix.size(); row++) {\n\t\t\tfor (int column = 0; column < matrix[row].size(); column++) {\n\t\t\t\tif (column != matrix[row].size() - 1) {\n\t\t\t\t\toutputfile << matrix[row][column] << \", \";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutputfile << matrix[row][column];\n\t\t\t\t}\n\t\t\t}\n\t\t\toutputfile << endl; \n\t\t}\n\t}\n\n\toutputfile.close();\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 468505,
              "key": "6f7819c0-8dd5-4ed7-8889-dce1764887ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can see that you need to create an ofstream object and then use the object to create a new file.\n```c++\n    ofstream outputfile;\n    outputfile.open (\"matrixoutput.txt\");\n```\n\nThe rest of the code iterates through the matrix and outputs the matrix in the format you specify in the code:\n```c++\n    if (outputfile.is_open()) {\n        for (int row = 0; row < matrix.size(); row++) {\n            for (int column = 0; column < matrix[row].size(); column++) {\n                if (column != matrix[row].size() - 1) {\n                    outputfile << matrix[row][column] << \", \";\n                }\n                else {\n                    outputfile << matrix[row][column];\n                }\n            }\n            outputfile << endl; \n        }\n    }\n```\n\nThe if statement is checking whether or not the end of the row is reached. If the current value is the end of a row, it's not necessary to put a comma separator after the number:\n``` c++\n                if (column != matrix[row].size() - 1) {\n                    outputfile << matrix[row][column] << \", \";\n                }\n                else {\n                    outputfile << matrix[row][column];\n                }\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 478368,
          "key": "10f5a65f-7715-434c-93ec-d1ffd8502aa6",
          "title": "Exercises",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "10f5a65f-7715-434c-93ec-d1ffd8502aa6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 478371,
              "key": "963252a2-7d0c-4820-8d1f-57a126f52767",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Exercises\n\nNow it's your turn to write C++ programs.\n\nPracticing is the best way to improve your C++ skills. Here you will find a few ideas to get you started. We have not provided a code playground this time, so you will need to compile and execute programs locally on your computer. \n\nThese are non-graded, so it's up to you how many you want to complete. At the end of the C++ Basics Module, there will be a more comprehensive project asking you to translate Python code to C++.\n\nIf you get stuck because you are not sure how to code something or how to decipher an error, use a search engine like Google or Bing. You can copy and paste an error message directly and oftentimes, somebody has already written a clear explanation of what the error means and how to get rid of it.  ",
              "instructor_notes": ""
            },
            {
              "id": 478374,
              "key": "ebed5bf2-a2db-401c-b24a-ad10d972be12",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Exercise 1\n\nIn the robot localization lectures, Sebastian Thrun led you through Python code for one-dimensional robot sensing and robot movement. You ended up with a sense() function for updating probabilities based on a sensor measurement. You also had a move() function that updated probabilities based on robot movement across a grid.\n\nTranslate the following code from Python into C++:\n\n```python\np = [0.2, 0.2, 0.2, 0.2, 0.2]\nworld = ['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\nmotions = [1,1]\npHit = 0.6\npMiss = 0.2\npExact = 0.8\npOvershoot = 0.1\npUndershoot = 0.1\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    q = []\n    for i in range(len(p)):\n        s = pExact * p[(i-U) % len(p)]\n        s = s + pOvershoot * p[(i-U-1) % len(p)]\n        s = s + pUndershoot * p[(i-U+1) % len(p)]\n        q.append(s)\n    return q\n\nfor k in range(len(measurements)):\n    p = sense(p, measurements[k])\n    p = move(p, motions[k])\n    \nprint p         \n```\n\nYou can find one potential solution to the above translation [here](https://s3-us-west-1.amazonaws.com/udacity-selfdrivingcar/iSDC/CPP_basics_EX1_solution.cpp). \n\nThe expected output is:\n```python\n0.211579 0.151579 0.0810526 0.168421 0.387368\n```",
              "instructor_notes": ""
            },
            {
              "id": 478375,
              "key": "2824becb-f3e6-4e59-a60e-0becdaf0fe02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Exercise 2\n\nWrite a C++ function that takes in two matrices and outputs their product. Your function should first check that the two matrices can actually be multiplied together; if matrix one is m by n and matrix two is w by z, then n must equal w. And the resulting matrix will be m by z.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}