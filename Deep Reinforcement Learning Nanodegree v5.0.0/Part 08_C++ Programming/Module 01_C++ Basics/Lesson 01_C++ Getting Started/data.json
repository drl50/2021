{
  "data": {
    "lesson": {
      "id": 380622,
      "key": "75103296-e910-4a10-8209-00ae877175fc",
      "title": "C++ Getting Started",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "The differences between C++ and Python and how to write C++ code.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/75103296-e910-4a10-8209-00ae877175fc/380622/1587647948984/C%2B%2B+Getting+Started+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/75103296-e910-4a10-8209-00ae877175fc/380622/1587647945073/C%2B%2B+Getting+Started+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 393583,
          "key": "6e5397f7-005b-4215-8bd2-fdc2ef7a772e",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6e5397f7-005b-4215-8bd2-fdc2ef7a772e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415873,
              "key": "45994082-4fd1-4105-b03b-6fbf90ae87ed",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ahoiVrq4qAk",
                "china_cdn_id": "ahoiVrq4qAk.mp4"
              }
            }
          ]
        },
        {
          "id": 380631,
          "key": "a181900d-00f4-4370-a9fe-9d28b1d6cd77",
          "title": "Lesson Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a181900d-00f4-4370-a9fe-9d28b1d6cd77",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "C++ Python CheatSheet",
                "uri": "https://d17h27t6h515a5.cloudfront.net/topher/2018/January/5a4d862b_c-python-cheatsheet/c-python-cheatsheet.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 421041,
              "key": "74d417e0-cd9c-473f-951a-3af944713254",
              "title": "Lesson Overview C++",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lR3PH3bL-9U",
                "china_cdn_id": "lR3PH3bL-9U.mp4"
              }
            },
            {
              "id": 425288,
              "key": "78f01419-b606-4919-8cd8-4034e37aa612",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Housekeeping\n\nThe classroom has embedded spaces where you can write and execute your C++ code directly in your browser; however, you may find it helpful to write C++ code on your own computer for this lesson (and not in the browser).\n\nHere are some suggested programs for writing and executing your code locally:\n* [Sublime Text](https://www.sublimetext.com/) as a general text editor\n* Download an IDE (Integrated Development Environment) such as [Xcode](https://developer.apple.com/xcode/downloads/) (Mac only), [Visual Studio](https://www.visualstudio.com/downloads/) or any other IDE.\n\n### Detailed Setup Instructions\n\nBig thanks to Michael Ikemann! Michael is a student in this Nanodegree and put together some **exceptionally** detailed documentation to help you get started with C++.\n\n\n* [Windows C++ Setup Guide](https://docs.google.com/document/d/1PA3YcIKpANBZuHLX6tz7bVw60ug_DM1_V_yFKyrMP-s/edit?usp=sharing)\n* [Mac C++ Setup Guide](https://docs.google.com/document/d/1FoIc9X0NcM-0y0dgXCzJcpu5lVXGFqS62mb1ABLDT1M/edit)\n",
              "instructor_notes": ""
            },
            {
              "id": 421042,
              "key": "beb1d5cd-6aba-46ad-86d5-3408f55c350c",
              "title": "Nd113 C3 L1 04 L Lesson Overview 2 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DjT2E23xhj8",
                "china_cdn_id": "DjT2E23xhj8.mp4"
              }
            },
            {
              "id": 384329,
              "key": "a71dea60-52ff-4697-86de-3142a5cb476a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Python C++ Cheatsheet\n\nWe are providing you with a cheatsheet showing you Python syntax and the C++ equivalent. You might find this cheatsheet helpful as you learn to program in C++. You'll find that some of the syntax between Python and C++ is exactly the same or at least similar.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 385817,
          "key": "fd73e2bf-0b8a-42d7-95e1-ec485b04a9dc",
          "title": "Elecia White",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fd73e2bf-0b8a-42d7-95e1-ec485b04a9dc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385822,
              "key": "82802d3d-7cf9-47a5-9415-7c9aab04aa9c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59a91307_embeddedlogo-04/embeddedlogo-04.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/82802d3d-7cf9-47a5-9415-7c9aab04aa9c",
              "caption": "",
              "alt": "",
              "width": 872,
              "height": 207,
              "instructor_notes": null
            },
            {
              "id": 385821,
              "key": "f7b3b41e-1cb3-428c-9e84-05d351260db6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Elecia White was kind enough to offer her time and expertise as we developed this course (and the next in the Nanodegree).\n\nElecia White is a principal embedded software engineer at [Logical Elegance, Inc.](http://logicalelegance.com/), a small consulting firm in California. She enjoys sharing her enthusiasm for engineering and devices through writing and speaking. Elecia is the author of O’Reilly’s [Making Embedded Systems](https://www.amazon.com/Making-Embedded-Systems-Patterns-Software/dp/1449302149), host of [Embedded.fm](http://embedded.fm/), and editor/blogger at [Embedded.fm](http://embedded.fm/blog/). Her [past projects](https://www.linkedin.com/in/elecia/) include children’s toys, a DNA scanner, inertial measurement units, Fitbit, and a gunshot location system. ",
              "instructor_notes": ""
            },
            {
              "id": 385823,
              "key": "d1bfbc6b-fef3-4f2d-b667-48260857762d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59a91312_cover/cover.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d1bfbc6b-fef3-4f2d-b667-48260857762d",
              "caption": "",
              "alt": null,
              "width": 500,
              "height": 656,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 380623,
          "key": "540bd954-02ab-4399-9246-6c22931b45ec",
          "title": "Why C++",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "540bd954-02ab-4399-9246-6c22931b45ec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425290,
              "key": "67bb1481-0c25-4a79-8e51-4286f17ed842",
              "title": "Why C++",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_t4ZvwfnuCA",
                "china_cdn_id": "_t4ZvwfnuCA.mp4"
              }
            }
          ]
        },
        {
          "id": 384263,
          "key": "3da5a1cb-33db-4cab-ad60-ecdf0195a18d",
          "title": "Python and C++ Comparison",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3da5a1cb-33db-4cab-ad60-ecdf0195a18d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 384308,
              "key": "0da434f7-1c15-40ea-b3c8-fc8b7b115188",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Python and C++ Comparison",
              "instructor_notes": ""
            },
            {
              "id": 384289,
              "key": "ef38e871-ff5f-4014-ba07-fb8e3e209fa4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Goal of this Module\n\nThe main goal of this module is to prepare you for writing C++ code. Because you are already familiar with coding practices in Python, the module will emphasize the similarities and differences between the two languages. \n\nThese lessons assume you are already familiar with general programming ideas like writing for loops, while loops, assigning values to variables, and writing functions. The fundamentals of how to code remain the same.\n\n### Learning a New Programming Language\nThe best way to learn a new programming language is to practice writing code; therefore, most of this lesson involves learning C++ syntax and then practicing the syntax in an exercise.\n\nBy the end of the lesson, you should feel confident translating Python code into C++ code.\n\nThroughout this lesson, you will be presented with Python code and the C++ equivalent. Below is an example of a simple program in Python alongside a C++ version. Both versions do exactly the same thing; they assign an integer 5 to the variable x. Then they output the value of x to the terminal.\n\nStudy each example line by line. Notice the similarities as well as the differences:",
              "instructor_notes": ""
            },
            {
              "id": 385228,
              "key": "9d9dff59-6bde-426e-9c63-b115be49fae5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59a76b5f_my-drawing/my-drawing.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9d9dff59-6bde-426e-9c63-b115be49fae5",
              "caption": "",
              "alt": null,
              "width": 962,
              "height": 580,
              "instructor_notes": null
            },
            {
              "id": 384313,
              "key": "b761878b-49af-42a4-8c26-12d1215dd04e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One similarity is variable assignment:  `x = 5`.  And the overall structure of the programs are the same.\n\nBut there are also a few major differences:\n* the C++ program is wrapped with a function called `main()`\n* `x` has to be explicitly defined as an integer\n* instead of using `print()` to output the results to terminal, the code uses `std::cout`\n\nYou are going to learn about all of these facets (and more) in this C++ lesson.",
              "instructor_notes": ""
            },
            {
              "id": 384321,
              "key": "116c2dff-3bfb-4b15-a557-07aa79e3d886",
              "title": "Include",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "116c2dff-3bfb-4b15-a557-07aa79e3d886",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think the code line `#include <iostream>` is for?",
                "answers": [
                  {
                    "id": "a1504045766752",
                    "text": "You need that for every C++ program you write.",
                    "is_correct": false
                  },
                  {
                    "id": "a1504045781122",
                    "text": "The include statement pastes the iostream file into the program when the program is compiled.",
                    "is_correct": true
                  },
                  {
                    "id": "a1504045781746",
                    "text": "That code line gives the program access to the library where `std::cout` is defined.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 384328,
              "key": "e8954f3f-69e9-4d81-aa60-ca543e49e620",
              "title": "The semi-colon",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e8954f3f-69e9-4d81-aa60-ca543e49e620",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the C++ code above, every command ended with a semi-colon. What is Python's equivalent of the semi-colon?",
                "answers": [
                  {
                    "id": "a1504046624673",
                    "text": "There is no equivalent",
                    "is_correct": false
                  },
                  {
                    "id": "a1504046692421",
                    "text": "Hitting return (ie enter) after each line of Python code",
                    "is_correct": true
                  },
                  {
                    "id": "a1504046693137",
                    "text": "Indenting Python code",
                    "is_correct": false
                  },
                  {
                    "id": "a1504046693849",
                    "text": "Parenthesis like ()",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 385246,
              "key": "0ff4a35d-7049-4dd8-9ade-a205dc4fb0ff",
              "title": "Curly Braces",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0ff4a35d-7049-4dd8-9ade-a205dc4fb0ff",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think the curly braces are used for in C++, and what might the equivalent be in Python?",
                "answers": [
                  {
                    "id": "a1504146770365",
                    "text": "Curly braces are used to make the code more readable. There is no equivalent in Python.",
                    "is_correct": false
                  },
                  {
                    "id": "a1504147011488",
                    "text": "Curly braces group a set of statements together. The Python equivalent is hitting return (ie enter) after a statement.",
                    "is_correct": false
                  },
                  {
                    "id": "a1504147012264",
                    "text": "Curly braces group a set of statements together. The Python equivalent is indentation.",
                    "is_correct": true
                  },
                  {
                    "id": "a1504147229769",
                    "text": "Curly braces are used to make the code more readable. The Python equivalent is indentation.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 395067,
          "key": "ef52be15-3d01-4723-9151-b6cd4392e52f",
          "title": "Static vs Dynamic Typing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ef52be15-3d01-4723-9151-b6cd4392e52f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425295,
              "key": "4c10cf42-2679-4fb5-bb00-39ff0ba93fc4",
              "title": "Static Vs Dynamic Typing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D7v6iIAORkE",
                "china_cdn_id": "D7v6iIAORkE.mp4"
              }
            }
          ]
        },
        {
          "id": 380624,
          "key": "bb61172f-aeb7-46f3-ba2c-93474c339748",
          "title": "C++ - A Statically Typed Language",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bb61172f-aeb7-46f3-ba2c-93474c339748",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 383966,
              "key": "e702904f-e12d-4b17-ba53-b342c7ae2341",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Python is Dynamic, C++ is Static\n\n### Dynamically Typed versus Statically Typed\nOn the surface, Python and C++ have a lot in common; for instance, you'll see that if statements, for loops, and basic mathematical expressions are quite similar. \n\nBut under the hood, Python and C++ have fundamental differences. One major difference is that C++ is **statically typed** whereas Python is **dynamically typed**. \n\nTake a look at this Python code:\n```python\n\nvehicle_doors = 4\nvehicle_speed = 3.0\nvehicle_acceleration = 1.5\nvehicle_on = True\nvehicle_gear = 'D'\nvehicle_doors = vehicle_doors + 1\n```\n\nPython automatically figures out that vehicle_doors is an integer, vehicle_speed is a float, and vehicle_on is a boolean variable. Variable assignment is **dynamic**. In Python, you do not need to specify the type of value that will go into a variable.\n\nDid you notice the typo \"vehicle_dors\" instead of \"vehicle_doors\"? That is legitimate python code, and it won't produce an error.",
              "instructor_notes": ""
            },
            {
              "id": 385275,
              "key": "133bba7c-6be6-4b0d-a4c9-e70a9aa4609f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In C++, none of the above code would work. You need to declare the variable type before you define a value; therefore, C++ is a **statically typed** language. Below is a C++ version of the code:\n\n```c++\n\nint vehicle_doors;\nfloat vehicle_speed;\nfloat vehicle_acceleration;\nchar vehicle_gear;\nbool vehicle_on;\n\nvehicle_doors = 4;\nvehicle_speed = 3.0;\nvehicle_acceleration = 1.5;\nvehicle_gear = 'D';\nvehicle_on = True;\n\nvehicle_doors = vehicle_doors + 1;\n```\n\nIf you had typed: `vehicle_dors = vehicle_doors + 1;`, you would get an error. That is because the vehicle_dors variable was never defined.",
              "instructor_notes": ""
            },
            {
              "id": 383921,
              "key": "fade5096-7cbe-4f61-a1f4-dd0c61b25997",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Declaring Variables in a Statically Typed Language",
              "instructor_notes": ""
            },
            {
              "id": 383967,
              "key": "a8365512-71d2-4730-8755-de70cbeea27c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this quiz, you will write integer variable declarations in C++. Read through the code below and fill in the TODO sections:",
              "instructor_notes": ""
            },
            {
              "id": 383917,
              "key": "fa6e9c31-cf3c-4621-8b52-a4c122923a25",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "fa6e9c31-cf3c-4621-8b52-a4c122923a25",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Statically Typed",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4838626075738112",
                "initial_code_files": [
                  {
                    "text": "// include all libraries needed\n#include <iostream>\n\n/* \t\n*\tThese are C++ comments. There are two ways to write comments in C++.\n*\tUsing the slash with an asterisk is one way.\n*/ \n\n// Here is another way to write comments in C++\n\n/* In general, C++ code is run from a file called main.cpp\n* The implementation goes into a function called main().\n* The main() function almost always returns a zero, which provides evidence that \n* the program ran to its end.\n*/\n\n// define main function\nint main() {\n    \n    int integer_one;\n    integer_one = 5;\n    \n    // TODO: Define a variable called integer_two and assign a value of 9.\n    \n    // TODO: Calculate the sum of integer_one and integer_two \n    // and assign the result to integer_sum\n    int integer_sum;\n    \n    // outputs the results to standard out\n    std::cout << integer_sum;\n    \n    return 0;\n}\n",
                    "name": "main.cpp"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 383923,
              "key": "285415a1-e2c3-4f5e-9bbc-e4128e952794",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Variable Assignment Python vs C++\n\nWhat if the quiz had been in Python instead of C++? Remember, Python is a dynamically typed language whereas C++ is statically typed. In Python, you can assign values  and Python automatically figures out what type of variable you wanted to use; however, when programming in C++, you need to declare the variable type prior to assignment. \n\n### C++ Tip\nIn the C++ quiz, you might have written a statement like:\n```c++\nint integer_two;\ninteger_two = 9;\n```\n\nYou can also define and assign a variable in one line of code like this:\n```c++\nint integer_two = 9;\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 385229,
          "key": "ba2651b1-19d5-4bd2-a3c3-f6922e53770f",
          "title": "Basic Data Types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba2651b1-19d5-4bd2-a3c3-f6922e53770f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385230,
              "key": "1af960d0-85e9-4615-810c-6d78eee562ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Basic C++ Data Types\n\nNow you know how to declare a variable in a statically typed language like C++. The C++ language has a handful of basic data types that you can use directly in your programs. These include integers, floats, and characters. Here is a table showing the most important basic data types that you will be using in the lesson:",
              "instructor_notes": ""
            },
            {
              "id": 385231,
              "key": "4c0c7205-6519-4656-91f2-928101eb7f00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "| **data type**             | **declaration** |\n|-----------------------|-------------|\n| integer               | int         |\n| floating point        | float       |\n| double floating point | double      |\n| character             | char        |\n| boolean               | bool        |\n| valueless             | void        |",
              "instructor_notes": ""
            },
            {
              "id": 385241,
              "key": "9fec2a5b-168b-4f6e-a159-0f61534d5ec7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Some of these data types might look a bit unfamiliar. Here are some examples of each type:\n\n**integer**\n\nintegers are whole numbers like \n-20\n5\n700\n-19\n\n**floating point** \n\nfloating points are real numbers containing decimals like 5.109 199.25 -1.278\n\n**double floating point**\n\nA double floating point can hold more decimals than a floating point; the tradeoff is that a double floating point requires more memory. The next part of the lesson goes into more detail about floating points versus double floating points.\n\n**character**\n\nThe char type definition is for ASCII characters. ASCII represent the English language Roman alphabet and  common mathematical symbols. A `char` variable can only hold one letter at a time; you cannot use a `char` type definition to represent a string. \n\nexamples of characters: a U l & @\n\n**boolean**\n\nBooleans are variables containing either true or false.\n\n**valueless**\n\nThe `void` type definition is used for special cases. You cannot declare a void variable in C++. You'll find that void is used when a function does not return anything; a function might print something out to the terminal but not return a value.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 385243,
              "key": "025da173-dc72-4363-98aa-de4e0ece3218",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz:: Assigning Other Data Types",
              "instructor_notes": ""
            },
            {
              "id": 385242,
              "key": "ab8515c9-a1c4-4ff9-acfe-366175d5f3f6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "ab8515c9-a1c4-4ff9-acfe-366175d5f3f6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5795434026106880",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n\nint main() {\n    \n    // TODO: define two floating point numbers. Assign 12.07 to the\n    // first floating point number. Assign 65.102 to the \n    // second floating point number.\n    \n    \n    // TODO: Calculate the sum of the two floating point variables into\n    // the float_sum variable.\n    \n    float float_sum; \n    std::cout << float_sum << std::endl;\n    \n    // TODO: Calculate difference between the second and first number\n    // output the results to cout. \n    \n    // TODO: Calculate second_float / first_float and output the results\n    // to cout.\n    \n    // TODO: Calculate the product of the two numbers and output the results\n    // to cout.\n\n    return 0;\n}",
                    "name": "main.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 384331,
          "key": "0a0f2f33-894d-45f3-b7e9-7569bffa7190",
          "title": "Floating versus Double [demonstration]",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0a0f2f33-894d-45f3-b7e9-7569bffa7190",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 384337,
              "key": "684a7638-4bff-4667-84f7-f6b2b993dc22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Floating and Double Floating Point Numbers\n\nIn the last section, you saw a table with fundamental C++ data types and their declarations:\n\n| **data type**             | **declaration** |\n|-----------------------|-------------|\n| integer               | int         |\n| floating point        | float       |\n| double floating point | double      |\n| character             | char        |\n| boolean               | bool        |\n| valueless             | void        |\n\nWhat exactly is the difference between a float and a double?",
              "instructor_notes": ""
            },
            {
              "id": 384354,
              "key": "2d5cb0b8-5781-4f0b-8422-356ed9cbb1fd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz: Floats versus Doubles",
              "instructor_notes": ""
            },
            {
              "id": 384353,
              "key": "b2abc61b-ce52-4089-92d2-484567322a41",
              "title": "Float versus Double",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b2abc61b-ce52-4089-92d2-484567322a41",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are true about floating point versus double floating point variables?\n",
                "answers": [
                  {
                    "id": "a1504050737962",
                    "text": "A float has about 7 digits after the decimal point whereas a double float can have about 15 digits after the decimal point. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1504050776213",
                    "text": "In general, using doubles lead to fewer rounding errors.",
                    "is_correct": true
                  },
                  {
                    "id": "a1504050778197",
                    "text": "Doubles use more memory.",
                    "is_correct": true
                  },
                  {
                    "id": "a1504050780365",
                    "text": "Both types typically require the same amount of memory when representing the same number.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 384355,
              "key": "66dc75b8-712e-4772-a07d-fe7e2dfa44f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Both data types can represent numbers containing decimals:\n\n```c++\nfloat x = 5.79;\n```\n\nand \n```c++\ndouble x = 5.79;\n```\n\nHowever, a double can store about twice as many digits as a float. But there is also a cost; a double requires more memory. \n\nAs you'll see in the demonstration below, storing more digits can be important especially when calculations require precision.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 384351,
              "key": "fe786105-8064-49f7-b474-7c7d49ae38d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Demo: Floating versus Double Type Definitions\n\nThe following code will show you the difference between a float data type and a double data type. The code assigns the number 11.0 to a float variable as well as a double variable. Next, each variable is divided by one-hundred thousand. \n\nA for loop then sums each variable one-hundred thousand times to see how close each variable can get to 11.0.  You will see that neither variable gets back to exactly 11.0 because memory can only hold a finite number of decimal places. But, the double variable gets closer to exactly 11.0.\n\nRead through the code and then hit the \"Test Run\" button to see the output of the demonstration.",
              "instructor_notes": ""
            },
            {
              "id": 384352,
              "key": "af02d738-6a8e-4ca9-8d20-3b19b43c27d6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "af02d738-6a8e-4ca9-8d20-3b19b43c27d6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5160799357239296",
                "initial_code_files": [
                  {
                    "text": "#include <stdio.h>\n\nint main() {\n    \n    // define floating point numbers    \n    float float_num;\n    float float_sum = 0;\n\n    double double_num;\n    double double_sum = 0;\n\n    int divisions = 100000;\n\n    // divide the floating point numbers by divisions\n    float_num = 11.0/divisions;\n    double_num = 11.0/divisions;\n\n    // sum the number by the number of divisions to see how close the results\n    // get to 11.0\n    for (int i = 0; i < divisions; i++) {\n        float_sum = float_sum + float_num;\n        double_sum = double_sum + double_num;\n\n    }\n    \n    printf(\"Floating point sum: %.15g\\n\", float_sum);\n    printf(\"Double sum: %.15g\\n\", double_sum);\n\n    return 0;\n}",
                    "name": "main.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 395080,
          "key": "c82411aa-1503-4466-b860-455f17baa118",
          "title": "Doubles are Bigger",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c82411aa-1503-4466-b860-455f17baa118",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425296,
              "key": "2568be0c-6857-43e7-852d-f8952605c9ce",
              "title": "Doubles Are Bigger",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uhwTWgmM2iY",
                "china_cdn_id": "uhwTWgmM2iY.mp4"
              }
            }
          ]
        },
        {
          "id": 380625,
          "key": "762f3209-0489-4054-b803-090f7fe1a7c2",
          "title": "Common Errors and Error Messages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "762f3209-0489-4054-b803-090f7fe1a7c2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 384163,
              "key": "aead33f3-e76e-4522-bf81-5ba5f86fe24e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Common Errors and Error Messages\n\nAs you to start to write your own C++ code, you might end up with some errors when you try to run your code. C++ errors can be very long and difficult to read even with something simple like a missing semi-colon. In this section, you are going to see some common errors you might run into when writing your C++ code. \nThe goal is to become comfortable debugging your own code.\n\nHere is a simple program that you saw in the beginning of the lesson. The program defines an integer x, assigns the value 5, and finally prints the results to terminal.\n\n```c++\n#include <iostream>\n\nint main ()\n{\n\n\tint x;\n\tx = 5;\n\n\tstd::cout << x << std::endl;\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 384221,
              "key": "12c2f27f-dfbc-4375-8865-724c7466e38f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Semi-colon Errors\nWhat happens if you forget to end a line with a semi-colon?\n\n```c++\n#include <iostream>\n\nint main ()\n{\n\n\tint x\n\tx = 5;\n\n\tstd::cout << x;\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 384222,
              "key": "2105e07e-95c2-4cef-8385-6e9812e8dc95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\nmain.cpp:6:7: error: expected ';' at end of declaration\n        int x\n             ^\n             ;\n1 error generated.\n```\n\nThis error message says that code line 6 at the 7th character in main.cpp should have ended in a semi-colon. Every command in C++ needs to end with a semi-colon.",
              "instructor_notes": ""
            },
            {
              "id": 384224,
              "key": "672cc209-0e3b-4fea-ac69-2703481ac47b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Declaring and Defining Variable Errors\n\nWhat about forgetting to declare a variable?\n\n```c++\n#include <iostream>\n\nint main ()\n{\n\tx = 5;\n\n\tstd::cout << x;\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 384225,
              "key": "6b13e583-7b4b-43e8-a026-1173084c19e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\nmain.cpp:6:2: error: use of undeclared identifier 'x'\n        x = 5;\n        ^\nmain.cpp:8:15: error: use of undeclared identifier 'x'\n        std::cout << x << std::endl;\n                     ^\n2 errors generated.\n```",
              "instructor_notes": ""
            },
            {
              "id": 384227,
              "key": "e340e717-c47c-48b7-ba2a-8607da6bb88b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This produced two errors: one for each time the x variable appeared. The error says that on line 6 at the 2nd character, the variable x needs to be declared. The same error occurs at line 8, character 15.\n\nThe *undeclared identifier* errors means that the variable needs a data type definition like `int x;`.",
              "instructor_notes": ""
            },
            {
              "id": 384229,
              "key": "c51c8572-1ed0-448d-8660-0b1952c1bc37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Namespace Errors\n\nWhat happens if you forget to include *std* in the line `std::cout`?\n\n```c++\n#include <iostream>\n\nint main ()\n{\n\n\tint x;\n\tx = 5;\n\n\tcout << x;\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 384233,
              "key": "d650f45b-580c-404e-a663-175d9a612489",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\nmain.cpp:9:2: error: use of undeclared identifier 'cout'; did you mean\n      'std::cout'?\n        cout << x;\n        ^~~~\n        std::cout\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/iostream:54:33: note: \n      'std::cout' declared here\nextern _LIBCPP_FUNC_VIS ostream cout;\n                                ^\n1 error generated.\n```\n\nAll eleven lines refer to just one error! If you read the error line by line, however, you can get a lot of useful information. The most important part comes at the beginning where you're told that line 9, character 2 has an undeclared identifier `cout`. The error message tries to help by mentioning you probably meant to use `std::cout`.\n\nThe rest of the error tells points you to the file where `std::cout` was originally defined.",
              "instructor_notes": ""
            },
            {
              "id": 384235,
              "key": "144d12d9-bd81-4f5d-8a24-2cb1471aa09f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Library Include Errors\n\nWhat happens if you forget to include the standard library file that defines `std::cout`?\n\n```c++\n\nint main ()\n{\n\n\tint x;\n\tx = 5;\n\n\tstd::cout << x;\n\n\treturn 0;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 384236,
              "key": "75e23799-5636-4819-8e6b-df52a034b2e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```c++\nmain.cpp:7:2: error: use of undeclared identifier 'std'\n        std::cout << x;\n        ^\n1 error generated.\n```\n\nThe error says that C++ does not recognize what `std` means on line 7, character 2. \n\nThe definition of `std` is in the iostream file of the standard library, which needs to be included at the top of the program with the line `#include <iostream>`.  Otherwise, your program won't recognize what `std` means.",
              "instructor_notes": ""
            },
            {
              "id": 384247,
              "key": "8ca6dc05-ebb2-44bd-8145-59335fb07e8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Putting it All Together\n\nSo far, you've seen what happens when your program outputs one error at a time. What about when there are multiple errors?\n\n```c++\nint main ()\n{\n\n\tx = 5;\n\n\tcout << x;\n\n\treturn 0\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 384248,
              "key": "66958363-f7da-489b-9c14-5691e0340288",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\nmain.cpp:4:2: error: use of undeclared identifier 'x'\n        x = 5;\n        ^\nmain.cpp:6:2: error: use of undeclared identifier 'cout'\n        cout << x;\n        ^\nmain.cpp:6:10: error: use of undeclared identifier 'x'\n        cout << x;\n                ^\nmain.cpp:8:10: error: expected ';' after return statement\n        return 0\n                ^\n                ;\n4 errors generated.\n```",
              "instructor_notes": ""
            },
            {
              "id": 384249,
              "key": "1c7b7a96-6fa9-4c88-805b-9f884233d303",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You get a list of errors starting from the top of your program and working down. \n\nUndeclared identifier implies a variable or function needs a definition. And the semi-colon errors reminds you that all C++ commands need to end in a semi-colon.\n\nWhen you run your code, you might end up with a very long list of errors that can be difficult to decipher. Usually, the first line of the error has the most important information, so start by looking at the top of the output. If you cannot figure out what an error means, try copying the error text and pasting it into a search engine. Oftentimes, there are resources online explaining what the error is and how to fix it.",
              "instructor_notes": ""
            },
            {
              "id": 384251,
              "key": "e2b10a5c-1b5a-46d6-843c-da9ea8b70c51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz: Fix this Code\n\nClick on the Test Run button below. You will see that this code produces quite a few errors. Fix the errors until you have a working solution. You can ignore everything below the \"Traceback\" errors, which are not C++ errors; the traceback errors are related to the Python backend for running coding quizzes.",
              "instructor_notes": ""
            },
            {
              "id": 384256,
              "key": "e956f765-8f6c-476c-91e0-bc2ca6994adf",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e956f765-8f6c-476c-91e0-bc2ca6994adf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5577110101032960",
                "initial_code_files": [
                  {
                    "text": "int main ()\n{\n\n\tx = 25\n\ty = 61.4\n\tz = 199.2\n\n\tdivision = y / z\n\n\tcout << x << '\\n'\n\tcout << y << '\\n'\n\tcout << division << '\\n'\n\t\n\treturn 0\n}",
                    "name": "main.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 380626,
          "key": "997978ae-cdcf-4741-a194-2a6fb94aa073",
          "title": "C++ Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "997978ae-cdcf-4741-a194-2a6fb94aa073",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385247,
              "key": "c7d3e8ec-f2f8-40ae-95ee-f9b31178c95f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Functions: Python vs C++\n\nIn both Python and C++, functions have the same role; functions group statements together to perform some task. Functions help you avoid copying and pasting the same code over and over again.\n\nThe syntax for writing functions is slightly different for mainly three reasons:\n\n1. Python detects the end of a code line based on seeing a carriage return and new line feed. C++ uses a semi-colon for the same purpose.\n2. Python uses indentation to group code statements together, but C++ uses curly braces.\n2. Python is dynamically typed while C++ is statically typed. Much like how you declared variables, you need to declare your functions.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 385248,
              "key": "4b578624-9a53-48f8-8f55-5345e6c3555b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's start off with a simple function and compare the Python and C++ code side-by-side.\n\nThis function takes in a velocity and time. These are multiplied together to calculate a distance. Besides the differences in syntax, pay special attention to:\n* the function declaration\n* variable declarations\n* what code goes inside main() and what code goes outside of main",
              "instructor_notes": ""
            },
            {
              "id": 385277,
              "key": "bd758155-c4f2-448b-bffa-86e1efc45054",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59a79f27_copy-of-template-1/copy-of-template-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bd758155-c4f2-448b-bffa-86e1efc45054",
              "caption": "",
              "alt": null,
              "width": 1322,
              "height": 705,
              "instructor_notes": null
            },
            {
              "id": 385278,
              "key": "a5f99079-4ff4-4c46-830b-9eee2f00ca5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Dissecting the Code\n\nSo the C++ code looks much longer than the Python code because the C++ has some extra parts. You are going to dissect this code piece by piece. \n\nThe code starts off with  \n```c++\n#include <iostream>\n```\n\nThat is importing the iostream part of the C++ Standard Library. You need that line of code in order to use  `\ncout`.\n\n\nAfter importing the necessary libraries, you see a function declaration.\n```c++\nfloat distance(float velocity, float time_elapsed); \n```\n\nThat line of code informs your C++ program that there is a function called **distance**. The function accepts two float variables and returns a float. The first float variable is called velocity and the second float variable is called time_elapsed.\n\nThen comes the **main** function. All C++ programs require a main() function that returns a zero. The main() function calls the distance function and outputs the results to the terminal.\n\n```c++\nint main() {\n\n\tstd::cout << distance(5, 4) << std::endl;\n\tstd::cout << distance(12.1, 7.9) << std::endl;\n\n\treturn 0;\n}\n```\n\nand finally, you have the function definition\n\n```c++\nfloat distance(float velocity, float time_elapsed) {\n\treturn velocity * time_elapsed;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 385280,
              "key": "58c9be06-8034-4e62-b0ef-6072b5d7777b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You have seen the **main()** function before, so this isn't the first time you have seen how functions work in C++. Notice how the main function and the distance function have very similar syntax. The only difference is that the main function does not accept any arguments and returns an integer of value zero; on the other hand, the distance function accepts two floats and returns a float.\n\nYou also don't make a separate declaration for the main function. On the next page, you'll get more practice with understanding functions and writing functions in C++.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 467054,
          "key": "bf1c2f84-2ac2-4358-bfe8-0d5adc84da54",
          "title": "Anatomy of a Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bf1c2f84-2ac2-4358-bfe8-0d5adc84da54",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 467230,
              "key": "00ef8023-9d5c-4fab-b1cf-a4e6d9a4e921",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Anatomy of a Function\n\nYou have seen how to write a function in C++. More generically, a C++ functions consists of a function declaration and a function definition. \n\nBecause C++ is statically typed, you need to specify the data types for the function input variables and the data type of whatever the function returns.  \n\n```c++\n// function declaration\nreturndatatype functionname(datatype variable_a, datatype variable_b, etc.);\n```\n\n```c++\n// function definition\nreturndatatype functionname(datatype variable_a, datatype variable_b, etc.) {\n     statement_1;\n     statement_2;\n     etc...\n\n   return returndatatype;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 467239,
              "key": "9e34324e-17a5-4a7b-8690-6b5d83957844",
              "title": "Function Definition",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9e34324e-17a5-4a7b-8690-6b5d83957844",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at this function definition:\n```c++\nbool isAutonomous(int x, float y, char z); \n```\n\nWhy is there a bool written before the function name?",
                "answers": [
                  {
                    "id": "a1512164608671",
                    "text": "Because the function accepts a boolean value as an input",
                    "is_correct": false
                  },
                  {
                    "id": "a1512164642174",
                    "text": "Because all functions in C++ return a boolean value letting the main function know that the function has finished running",
                    "is_correct": false
                  },
                  {
                    "id": "a1512164657181",
                    "text": "Because the function returns a boolean value",
                    "is_correct": true
                  },
                  {
                    "id": "a1512164668653",
                    "text": "Because the function accepts a float variable",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 467244,
              "key": "0dd2f9b3-e7bd-4757-b378-4c21bf94d79a",
              "title": "Function Declarations",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0dd2f9b3-e7bd-4757-b378-4c21bf94d79a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would be the input and output of this function?\n```c++\nchar myfunction(int x);\n```",
                "answers": [
                  {
                    "id": "a1512164719320",
                    "text": "The function would have an integer input and return a character.",
                    "is_correct": true
                  },
                  {
                    "id": "a1512164743006",
                    "text": "The function would have a character input and return an integer",
                    "is_correct": false
                  },
                  {
                    "id": "a1512164743804",
                    "text": "The function would have an integer input and return a string.",
                    "is_correct": false
                  },
                  {
                    "id": "a1512164744378",
                    "text": "The function would have a string input and return an integer.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 467246,
              "key": "7abce9d2-8642-49f0-9e96-f09220546bf7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz: Write a Function\n\nWrite a function, called distance, with three inputs and one output. The inputs are velocity, acceleration and time. The output is the distance traveled over the elapsed time. The equation for calculating distance is:\n<span class=\"mathquill\">distance = velocity \\times elapsedtime + 0.5 \\times acceleration \\times elapsedtime \\times elapsedtime</span>\n\nThis quiz is not graded. You will see some test cases in the main() function to test out your code. To run your code, click on the \"Test Run\" button.\n\nA solution has been provided in the solution.cpp so that you can compare your results.",
              "instructor_notes": ""
            },
            {
              "id": 467252,
              "key": "c1067e54-2903-4584-9f3b-a775481445a1",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c1067e54-2903-4584-9f3b-a775481445a1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5700041537355776",
                "initial_code_files": [
                  {
                    "text": "//TODO: include the iostream part of the standard library\n\n//TODO: declare your function called distance\n\n// Leave the main function as is\nint main() {\n    \n    // TODO: The following are examples you can use to test your code.\n    // You will need to uncomment them to get them working.\n    \n    // std::cout << distance(3, 4, 5) << std::endl;  \n    // std::cout << distance(7.0, 2.1, 5.4) << std::endl;\n    \n    return 0;   \n}\n\n//TODO: define your function",
                    "name": "main.cpp"
                  },
                  {
                    "text": "//TODO: include the iostream part of the standard library\n#include <iostream>\n\n//TODO: declare your function called distance\nfloat distance(float velocity, float acceleration, float time_elapsed);\n\n// Leave the main function as is\nint main() {\n    \n    // TODO: The following are examples you can use to test your code.\n    // You will need to uncomment them to get them working.\n    \n    std::cout << distance(3, 4, 5) << std::endl;  \n    std::cout << distance(7.0, 2.1, 5.4) << std::endl;\n    \n    return 0;   \n}\n\n//TODO: define your function\nfloat distance(float velocity, float acceleration, float time_elapsed) {\n    return velocity*time_elapsed + 0.5*acceleration*time_elapsed*time_elapsed;\n}",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 467255,
          "key": "74b1ab83-5722-4b60-ad83-4463c81c4017",
          "title": "Multiple Outputs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "74b1ab83-5722-4b60-ad83-4463c81c4017",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 467258,
              "key": "aea380cb-960f-43f1-b4c6-eecc1ec5d4cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Functions with More than One Output\n\nIn Python, you can write a function that has multiple outputs. For example, \n```python\n## Python Code\ndef distance(velocity, time_elapsed):\n\treturn velocity * time_elapsed, velocity / 2\n```\n\nwould output both velocity * time_elapsed and velocity / 2. \n\nIn C++, functions can only have one output. There are work-arounds, but these work-arounds go beyond the scope of this module. ",
              "instructor_notes": ""
            },
            {
              "id": 467260,
              "key": "a4bd69b6-da57-4da6-9148-af22b7b5e5a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# C++ Tip: Function Declarations\n\nYou do not have to put the function declaration at the top of your code to get a working solution. Much like how you can declare and define a variable simultaneously, `int x = 5; `, you can also declare and define a function simultaneously. \n\nThe following code would work as well:\n```c++\n// C++ code\nfloat distance(float velocity, float time_elapsed) {\n\treturn velocity * time_elapsed;\n}\n\nint main() {\n\n\tstd::cout << distance(5, 4) << std::endl;\n\tstd::cout << distance(12.1, 7.9) << std::endl;\n\n\treturn 0;\n}\n```\n\nBut note that you have to define your function before the main() function not *after*; otherwise your code would try to call the distance() function but not have a definition for the function.\n\nHowever, we encourage you to always declare your functions before main() and define them after main. In the next lesson in the nanodegreee called practical C++, you will learn why; declaring and defining your functions separately helps keep your code organized as your programs become more complex.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 395088,
          "key": "12d95b85-7526-4d58-a003-e9235f0477bc",
          "title": "Two Functions Same Name",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "12d95b85-7526-4d58-a003-e9235f0477bc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425316,
              "key": "5ce5d837-4260-45ad-9731-dc2ab650be6b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Andy learns about `typedef` and is reminded to always be suspicious of repeated code. \n\nNote: Elecia and Andy use the word \"vector\". For now you should think of a vector as something similar to a Python list. So when Elecia says \"vector vector float\", she is referring to a two-dimensional list (a list of lists) whose elements are floats.",
              "instructor_notes": ""
            },
            {
              "id": 425297,
              "key": "6829efb1-d40f-4b9b-bad2-08d2233b6252",
              "title": "Two Functions Same Name",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0ZF649G58l4",
                "china_cdn_id": "0ZF649G58l4.mp4"
              }
            },
            {
              "id": 425317,
              "key": "bfbaf387-6404-438f-93b3-34bf45431966",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The following line of code can be used to define an entirely new type called `t_grid` which is a vector of vectors of floats (for now you can think of vectors as being similar to Python lists).\n```cpp\ntypedef vector < vector <float> > t_grid; \n```\n\nAnywhere you would have written `vector < vector <float> >`, you can now just write `t_grid`!",
              "instructor_notes": ""
            },
            {
              "id": 425298,
              "key": "6b32b639-83e3-4a72-81e9-b331379ac8ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video below Andy discovered something surprising while translating his histogram filter code from Python to C++. He could have two **different** functions which each had the **same** name and this didn't cause any problems.\n\nYou can find the code Elecia and Andy discuss below the video.\n",
              "instructor_notes": ""
            },
            {
              "id": 395089,
              "key": "18f748de-b4be-48da-9df8-3f5e202fbd36",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```cpp\n\nbool close_enough(float v1, float v2) { \n\tif (abs(v2-v1) > 0.0001 ) {\n\t\treturn false;\n\t} \n\treturn true;\n}\n\nbool close_enough(vector < vector <float> > g1, vector < vector <float> > g2) {\n\tint i, j;\n\tfloat v1, v2;\n\tfor (i=0; i<g1.size(); i++) {\n\t\tfor (j=0; j<g1[0].size(); j++) {\n\t\t\tv1 = g1[i][j];\n\t\t\tv2 = g2[i][j];\n\t\t\tif (abs(v2-v1) > 0.0001 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 425299,
              "key": "e0f6900c-3a3e-4a71-b75f-dac408207355",
              "title": "Two Functions Same Name",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9SgmzOfBmRU",
                "china_cdn_id": "9SgmzOfBmRU.mp4"
              }
            }
          ]
        },
        {
          "id": 395083,
          "key": "698a3b16-5d47-4d79-919f-ce99d3d9b8f8",
          "title": "Function Signatures 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "698a3b16-5d47-4d79-919f-ce99d3d9b8f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425303,
              "key": "140a4a6e-a049-4792-9861-40c55587247a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here Andy and Elecia discuss function signatures. The code for the `test_normalize` function can be found below the video.",
              "instructor_notes": ""
            },
            {
              "id": 425300,
              "key": "407bb23f-bd9b-4db3-8d1a-ef822e9eb3b7",
              "title": "Function Signatures 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "T6kQ_4w98IQ",
                "china_cdn_id": "T6kQ_4w98IQ.mp4"
              }
            },
            {
              "id": 425306,
              "key": "a82c3064-311b-409c-ac3e-5374a6809f1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```cpp\nbool test_normalize() {\n    //declare several variables on one line\n    vector < vector <float> > unnormalized, normalized, result; \n\t\n    unnormalized = zeros(2, 2);\n    normalized = zeros(2,2);\n\n\tint i,j;\n\n\tfor (i=0; i<2; i++) {\n\t\tfor(j=0; j<2; j++) {\n\t\t\tunnormalized[i][j] = 1.0;\n\t\t\tnormalized[i][j] = 0.25;\n\t\t}\n\t}\n\n\tresult = normalize(unnormalized);\n\n\tbool correct;\n\tcorrect = close_enough(normalized, result);\n\n\tif (correct) {\n\t\tcout << \"! - normalize function worked correctly!\\n\";\n\t}\n\telse {\n\t\tcout << \"X - normalize function did not work correctly.\\n\";\n\t\tcout << \"For the following input:\\n\\n\";\n\t\tshow_grid(unnormalized);\n\t\tcout << \"\\nYour code returned the following:\\n\\n\";\n\t\tshow_grid(result);\n\t\tcout << \"\\nWhen it should have returned the following:\\n\";\n\t\tshow_grid(normalized);\n\t}\n\treturn correct;\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 395087,
          "key": "604af009-1143-4fb4-8983-918a776586e8",
          "title": "Function Signatures 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "604af009-1143-4fb4-8983-918a776586e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 425307,
              "key": "d3027cfc-5286-4825-8ded-d4c216030c96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Andy and Elecia continue their discussion of function signatures. Code below the video.",
              "instructor_notes": ""
            },
            {
              "id": 425304,
              "key": "15e84928-3f41-4e19-850e-ee28f6fe6b95",
              "title": "Function Signatures 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Sx4AWTmXl2U",
                "china_cdn_id": "Sx4AWTmXl2U.mp4"
              }
            },
            {
              "id": 425308,
              "key": "cd6a4643-4fa0-4ca7-91d0-2701457809da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **signature** for the normalize function is:\n```cpp\nvector< vector<float> > normalize(vector< vector <float> > grid);\n```",
              "instructor_notes": ""
            },
            {
              "id": 425305,
              "key": "2955bf34-1198-4df2-9e9e-fac41a4a008b",
              "title": "Function Signatures 3 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U3QAFb3AS1M",
                "china_cdn_id": "U3QAFb3AS1M.mp4"
              }
            }
          ]
        },
        {
          "id": 380634,
          "key": "fb11aefc-1569-4af3-a551-fbfcd1492aff",
          "title": "If and Boolean Logic",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fb11aefc-1569-4af3-a551-fbfcd1492aff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385475,
              "key": "e464c7e3-d3a8-44a2-9c9b-38e7e78a1569",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Control Statements\n\nNow that you know how to declare variables and write functions, you are well on your way to C++ proficiency. \n\nSo far, the programs you've worked with have been relatively simple. You will need control statements to make more complex programs. Control statements like **if** and **for** are fundamental to many programming languages. They allow you to make conditions about when and how often code statements should be run.\n\nIn this section, you will learn to use C++ **if** statements and the associated boolean logic. \n\nThe next section will cover looping with **while** and **for**. And then finally, you will learn about the **switch** statement. Python has equivalents for **if**, **while** and **for**; however, the **switch** statement does not exist in Python.\n\nAfter you learn about control statements, you will be ready to write more sophisticated C++ programs.",
              "instructor_notes": ""
            },
            {
              "id": 385476,
              "key": "eab34e75-ec85-4924-ad78-b1bd3d8b4d75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Python vs. C++ If\n\nBelow is an example of a Python set of if statements versus the C++ equivalent.\n\nYou will see that the logical structure is exactly the same but the syntax is slightly different.  You could imagine that the code below would be part of a traffic light classification program that tells a vehicle the current color\nof a traffic signal.",
              "instructor_notes": ""
            },
            {
              "id": 385497,
              "key": "5aa402d0-299c-48fb-8bde-4ac2f116ea72",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59a86c50_copy-of-template-2/copy-of-template-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5aa402d0-299c-48fb-8bde-4ac2f116ea72",
              "caption": "",
              "alt": null,
              "width": 1391,
              "height": 865,
              "instructor_notes": null
            },
            {
              "id": 385477,
              "key": "eda013ee-e291-47b8-8a72-343801a6bb31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A generic if else statement in C++ looks like this:\n```c++\nif (<some criteria>) {\n    statement_1;\n    statement_2;\n   .... etc.\n}\nelse if (<some other criteria>) {\n    statement_1;\n    statement_2;\n   .... etc.\n}\nelse {\n    statement_1;\n    statement_2;\n   .... etc.\n}\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 385669,
              "key": "2231362a-2b49-4907-a58e-afb16c9b8786",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Boolean Logic\n\nYou need boolean logic to make if statements useful. Boolean logic works the same way in Python and in C++; some of the syntax is the same and some is slightly different.\n\nHere is a table showing comparison operators in the two languages:\n\n| Operator              | Python | C++ |\n|-----------------------|--------|-----|\n| equal                 | ==     | ==  |\n| not equal             | !=     | !=  |\n| greater than          | >      | >   |\n| less than             | <      | <   |\n| greater than or equal | >=     | >=  |\n| less than or equal    | <=     | <=  |\n\n\nYes, indeed, comparison operators are exactly the same in the two languages!",
              "instructor_notes": ""
            },
            {
              "id": 385670,
              "key": "a6c8e66a-ce3c-450d-98c6-6ab37919ac01",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "What about logical operators such as **and**, **or**, as well as **not**?\n\nThese are not the same in the two languages:\n\n| Operator | Python | C++    |\n|----------|--------|--------|\n| and      | and    | &&     |\n| or       | or     | &#124;&#124;  |\n| not      | not    | ! |\n\nThe or operator in C++ is represented by two vertical bar characters. On English keyboards, you can find the vertical bar key above the enter key. ",
              "instructor_notes": ""
            },
            {
              "id": 385682,
              "key": "b7b01743-3a96-4729-9a9c-8a687d3816c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz",
              "instructor_notes": ""
            },
            {
              "id": 385679,
              "key": "9191fd25-dfb2-459c-8de8-f0e5fd1c867e",
              "title": "Operators",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9191fd25-dfb2-459c-8de8-f0e5fd1c867e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the definition with the C++ operator"
                },
                "concepts_label": "Definition",
                "answers_label": "Operator in C++",
                "concepts": [
                  {
                    "text": "and",
                    "correct_answer": {
                      "id": "a1504221537234",
                      "text": "&&"
                    }
                  },
                  {
                    "text": "greater than",
                    "correct_answer": {
                      "id": "a1504221581222",
                      "text": "**>**"
                    }
                  },
                  {
                    "text": "not",
                    "correct_answer": {
                      "id": "a1504221586421",
                      "text": "!"
                    }
                  },
                  {
                    "text": "less than or equal",
                    "correct_answer": {
                      "id": "a1504221591236",
                      "text": "<="
                    }
                  },
                  {
                    "text": "equal",
                    "correct_answer": {
                      "id": "a1504221598772",
                      "text": "=="
                    }
                  },
                  {
                    "text": "less than",
                    "correct_answer": {
                      "id": "a1504221602596",
                      "text": "<"
                    }
                  },
                  {
                    "text": "or",
                    "correct_answer": {
                      "id": "a1504221628925",
                      "text": "||"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1504221628925",
                    "text": "||"
                  },
                  {
                    "id": "a1504222031851",
                    "text": "{}"
                  },
                  {
                    "id": "a1504222019459",
                    "text": "not"
                  },
                  {
                    "id": "a1504222024292",
                    "text": "%"
                  },
                  {
                    "id": "a1504222016899",
                    "text": "and"
                  },
                  {
                    "id": "a1504222002084",
                    "text": "??"
                  },
                  {
                    "id": "a1504221581222",
                    "text": "**>**"
                  },
                  {
                    "id": "a1504221586421",
                    "text": "!"
                  },
                  {
                    "id": "a1504221537234",
                    "text": "&&"
                  },
                  {
                    "id": "a1504221591236",
                    "text": "<="
                  },
                  {
                    "id": "a1504221598772",
                    "text": "=="
                  },
                  {
                    "id": "a1504221602596",
                    "text": "<"
                  },
                  {
                    "id": "a1504222007932",
                    "text": "or"
                  }
                ]
              }
            },
            {
              "id": 385681,
              "key": "05574b1b-cf0b-42c8-a81f-831f7f0e5c2e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Playground",
              "instructor_notes": ""
            },
            {
              "id": 393298,
              "key": "aabcabd7-494d-4bfb-8d6c-1bff3996c70f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is a playground for writing your own if statements. In the code comments, you will see a couple of suggestions of what to code. The solution.cpp file has solutions with which you can compare your code.",
              "instructor_notes": ""
            },
            {
              "id": 385500,
              "key": "ccb1a440-bc26-4238-b193-9e453849f2b7",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "ccb1a440-bc26-4238-b193-9e453849f2b7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4979296623001600",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n\nint main() {\n    \n    /* \n    * TODO: Use this as a playground for writing if, else if and else statements\n    * To get you started here, are some ideas:\n    * \n    * 1. Create an integer variable and a set of if, elseif and else statements that\n    * output whether the number is positive or negative.\n    * \n    * 2. Create a character variable containing 'a' for acceleration, 'b' for braking, \n    * 'p' for parked, or 'n' for neutral and outputs whether or not the vehicle is accelerating, braking, \n    * parked or in neutral.\n    *\n    * Practice Using Boolean Logic\n    *\n    * You can see an example solution in the solution.cpp file\n    */\n    \n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n\nint main() {\n    \n    /* \n    * TODO: Use this as a playground for writing if, else if and else statements\n    * To get you started here, are some ideas:\n    * \n    * 1. Create an integer variable and a set of if, elseif and else statements that\n    * output whether the number is positive or negative.\n    * \n    * 2. Create a character variable containing 'a' for acceleration, 'b' for braking, \n    * 'p' for parked, or 'n' for neutral and outputs whether or not the vehicle is accelerating, braking, \n    * parked or in neutral.\n    *\n    * Practice Using Boolean Logic\n    *\n    * You can see an example solution in the solution.cpp file\n    */\n    \n    int x = 5;\n    if (x > 0) {\n        std::cout << \"Positive Number\" << std::endl;\n    }\n    else if (x < 0) {\n        std::cout << \"Negative Number\" << std::endl;\n    }\n    else {\n        std::cout << \"Zero\" << std::endl;\n    }\n    \n    \n    char status = 'a';\n    \n    if (status == 'a') {\n        std::cout << \"Accelerating\" << std::endl;\n    }\n    else if (status == 'b') {\n        std::cout << \"Braking\" << std::endl;\n    }\n    else if (status == 'p') {\n        std::cout << \"Parking\" << std::endl;\n    }\n    else if (status == 'n') {\n        std::cout << \"Neutral\" << std::endl;\n    }\n    else {\n        std::cout << \"Unknown\" << std::endl;\n    }\n    \n    return 0;\n}\n",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 385649,
          "key": "5866d47a-6c36-405d-b515-84fb4aa711f8",
          "title": "While and For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5866d47a-6c36-405d-b515-84fb4aa711f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385650,
              "key": "449bb9c6-1567-4eaa-87bd-7969744e7c2c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Python vs. C++ While\n\nBelow you'll see an example of a Python while loop compared with a C++ while loop. They look quite similar! \n\nThe example starts with an integer 15 in the elapsed_time variable. With each iteration, the integer is reduced by 1. Once the elapsed_time reaches zero, the program leaves the while loop.",
              "instructor_notes": ""
            },
            {
              "id": 385651,
              "key": "5b52b6e1-4dc6-4a5f-a829-41c6afe204ea",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59a8862d_while/while.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5b52b6e1-4dc6-4a5f-a829-41c6afe204ea",
              "caption": "",
              "alt": "",
              "width": 1471,
              "height": 705,
              "instructor_notes": null
            },
            {
              "id": 385652,
              "key": "c1f3c922-74d0-4991-9089-64edd6e34bec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A generic while statement looks like this:\n\n```c++\nwhile (<some criteria>) {\n    statement_1;\n    statement_2;\n    statement_3;\n    ....etc\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 385653,
              "key": "351f94f7-212d-42e0-8b58-e5c4d81f024a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Python vs. C++ For loops\n\nFor loop syntax is very similar in Python and C++ as well. \n\nThis following example is like the while loop except the count variable increases instead of decreases (this does not necessarily need to be the case, we just did it that way here). \n\n",
              "instructor_notes": ""
            },
            {
              "id": 385654,
              "key": "6a0b46bc-9077-4335-8083-b016d08e49a8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59a88d29_for/for.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6a0b46bc-9077-4335-8083-b016d08e49a8",
              "caption": "",
              "alt": "",
              "width": 1503,
              "height": 662,
              "instructor_notes": null
            },
            {
              "id": 385655,
              "key": "df734a22-a55e-4c9a-b188-4fb8e8286a7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One thing to note is how Python iterates through the **i** variable versus how C++ does the iteration.\n\nFor python the iterator was defined here:\n```python\ni in range(0, elapsed_time)\n```\n\nPython's range() function generates a list of numbers, which in this case would be\n```python\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\nThen Python assign each of these values in turn to the **i** variable until reaching the end of the list.\n\nFor C++, the iteration happens in this line of code:\n```c++\n(int i = 0; i < elapsed_time; i++) \n```\n\nFirst you declare the variable **i** and assigned a value (in this case zero). The for loop then checks if\n```c++\ni < elapsed_time\n```\n\nIf true, then the code block is run and then **i** increases by one. The code `i++` is equivalent to saying `i=i+1`.\n\nWhen \n```c++\ni = 14\n```\n\nthat will be the last time that the code block runs. The code checks that 14 is less than 15, runs the code block and increases **i** to 15. Then the code checks if 15 is less than 15. Since that is false, the for loop does not run again.\n",
              "instructor_notes": ""
            },
            {
              "id": 393299,
              "key": "22db4fa8-efa3-4e42-bd88-dca7ed19f836",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Playground - For Loops\n\nUse this playground to program for loops. The comments have a suggestion to get you started, and you can compare your code with the solution in solution.cpp.",
              "instructor_notes": ""
            },
            {
              "id": 385656,
              "key": "e60682ed-c4b6-4109-85c5-89d710df3f9e",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e60682ed-c4b6-4109-85c5-89d710df3f9e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6413600951500800",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n\nint main() {\n    \n    //TODO: Use this as a playground to write a for loop and if statements\n    // in the same program.\n    \n    // For example, write a for loop that iterates from 0 to 80.\n    // If the iterator is greater than or equal to 0 but less than 10, \n    //      output the phrase 'slow'\n    // If the iterator is between 10 inclusive\n    //      and less than 30, output the phrase 'medium'\n    // If the iterator is between 30 inclusive and 70, output the phrase 'fast'\n    // If the iterator is greater than 70 inclusive, output the phrase 'too fast'\n    \n    return 0;\n}",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n\nint main() {\n    \n    for (int i = 0; i < 80; i++) {\n        if (i < 10) {\n            std::cout << \"slow\" << std::endl;\n        }\n        else if (i < 30) {\n            std::cout << \"medium\" << std::endl;\n        }\n        else if (i < 70) {\n            std::cout << \"fast\" << std::endl;\n        }\n        else {\n            std::cout << \"too fast\" << std::endl; \n        }\n        \n    }\n    \n    \n    return 0;\n}",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 752198,
              "key": "8a9b33b4-135c-4274-b8fa-820ec4c5ccef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One item to note in the above playground is that C++ considers something enclosed in single quotes ('a') to be a `char`, while double quotes (\"fast\") is a string.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 385693,
          "key": "68a85d24-6eae-47a5-9c82-6160f37ebd0a",
          "title": "Switch Statement",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68a85d24-6eae-47a5-9c82-6160f37ebd0a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385694,
              "key": "59e3cc84-7af7-4c17-a023-8899759bead2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Switch\n\nA switch statement is very similar to an if clause. In fact, you can write a program that does the exact same thing with either a switch statement or a series of if-else clauses.\n\nThen why bother using a switch statement? For reasons we won't detail here, switch statements can oftentimes be faster to execute. Many programming languages have a switch statement including Java, Javascript, PHP, C++ among others; Python is an exception. \n\nSince there is no Python switch statement, we will compare a set of if-else C++ clauses with a C++ switch statement.\n\nClick on the image to zoom in.",
              "instructor_notes": ""
            },
            {
              "id": 385703,
              "key": "86cc0adb-da07-463a-92bd-b759582c29f5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59a8b9cb_switch/switch.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86cc0adb-da07-463a-92bd-b759582c29f5",
              "caption": "",
              "alt": "",
              "width": 1879,
              "height": 1028,
              "instructor_notes": null
            },
            {
              "id": 385706,
              "key": "ba087825-fbb8-4a4a-a382-c17f85589434",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The output of the code would be\n```c++\nNot Moving - Neutral\nYour car is currently in gear: N\n```",
              "instructor_notes": ""
            },
            {
              "id": 385704,
              "key": "f4a1865f-370d-42eb-83e2-9653509bb50c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's break down what is happening in the switch statement:\n\n```c++ \n\tchar gear_status = 'N';\n\n\tswitch(gear_status) {\n\t\tcase 'D' :\n\t\t\tstd::cout << \"Driving Forward\" << std::endl;\n\t\t\tbreak;\n\t\tcase 'N' :\n\t\t\tstd::cout << \"Not Moving - Neutral\" << std::endl;\n\t\t\tbreak;\n\t\tcase 'P' :\n\t\t\tstd::cout << \"Not Moving - Parked\" << std::endl;\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tstd::cout << \"Driving in Reverse\" << std::endl;\n\t\t\tbreak;\n\t}\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 385705,
              "key": "e6c4629e-cd67-4862-b690-b00aa15acbca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Each time **case** appears, the code checks to see if the gear_status variables matches the case. Once gear_status finds a matching case, the code inside the case runs.  \n\nIn C++, the switch statement was designed to run the code in the matching case and then all of the cases below. You need the **break** lines of code if you want your code to leave the switch after executing the matching case.\n\nIn other words, if the code were written without using break,\n```c++\n#include <iostream>\n\nint main() {\n\n\tchar gear_status = 'N';\n\n\tswitch(gear_status) {\n\t\tcase 'D' :\n\t\t\tstd::cout << \"Driving Forward\" << std::endl;\n\t\tcase 'N' :\n\t\t\tstd::cout << \"Not Moving - Neutral\" << std::endl;\n\t\tcase 'P' :\n\t\t\tstd::cout << \"Not Moving - Parked\" << std::endl;\n\t\tcase 'R':\n\t\t\tstd::cout << \"Driving in Reverse\" << std::endl;\n\t}\n\n\tstd::cout << \"Your car is currently in gear: \" << gear_status << std::endl;\n\n\treturn 0;\n}\n```\n\nthe code would still skip the 'D' case. But once the code found a match with the 'N' case, the code in the 'N', 'P', and 'R' cases would execute.",
              "instructor_notes": ""
            },
            {
              "id": 385707,
              "key": "de933b4a-1a20-40f1-862a-ad685f59f035",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Switch Limitations\n\nIf-else statements are much more flexible than switch statements. In fact, the `case` clauses in switch statements can only make comparisons between integer values. Switch cases can also compare characters like in the example code because C++ is actually converting the characters to integers. \n\nOn the other hand, if statements can make comparisons between floating point numbers as well as between integers.\n\nThe general form of a switch statement looks like this:\n```c++\n\tint variable = integer;\n\n\tswitch(variable) {\n\t\tcase 1:\n            code statements;\n            break;\n\t\tcase 2 :\n            code statements;\n            break;\n\t\tcase 3:\n            code statements;\n            break;\n\t\tcase 4:\n            code statements;\n            break;\n        case etc ... \n\t}\n```",
              "instructor_notes": ""
            },
            {
              "id": 393309,
              "key": "4cc5b122-66e2-41d5-afa9-4a9ca9146717",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Switch Statement - Playground\n\nPractice writing a switch statement in the playground below. The code comments will help you get started. You can run your code with the \"Test Run\" button and then compare your solution with \"solution.cpp\". \n",
              "instructor_notes": ""
            },
            {
              "id": 385713,
              "key": "f4755ccd-5a49-48d0-a364-c8cb6db1f9a6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "f4755ccd-5a49-48d0-a364-c8cb6db1f9a6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5349325235421184",
                "initial_code_files": [
                  {
                    "text": "//TODO Practice writing switch statements\n// Don't forget an include statement if you want to use std::cout\n\nint main() {\n    \n    // TODO: write a program that outputs whether a vehicle is a motorcycle,\n    // 2-door coupe, 4-door car or a 5-door mini-van. \n    // You should create a variable that holds the number of doors in the vehicle\n    // A motorcycle would have doors = 0 for example. \n    // Then use a switch statement to output to the terminal the kind of vehicle\n    // you have\n    \n    return 0;\n}",
                    "name": "main.cpp"
                  },
                  {
                    "text": "//TODO Practice writing switch statements\n// Don't forget an include statement if you want to use std::cout\n\n#include <iostream>\n\nint main() {\n    \n    // TODO: write a program that outputs whether a vehicle is a motorcycle,\n    // 2-door coupe, 4-door car or a 5-door mini-van. \n    // You should create a variable that holds the number of doors in the vehicle\n    // A motorcycle would have doors = 0 for example. \n    // Then use a switch statement to output to the terminal the kind of vehicle\n    // you have\n\n    int doors = 5;\n    \n    switch(doors) {\n        case 0:\n            std::cout << \"Motorcycle\" << std::endl;\n            break;\n        case 2:\n            std::cout << \"Coupe\" << std::endl;\n            break;\n        case 4:\n            std::cout << \"Sedan\" << std::endl;\n            break;\n        case 5:\n            std::cout << \"Mini-van\" <<std::endl;\n            break;\n\n    }\n    \n    return 0;\n}",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 380629,
          "key": "ecff89fc-9689-4175-a516-f038af58766e",
          "title": "Libraries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ecff89fc-9689-4175-a516-f038af58766e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385716,
              "key": "2f7c750b-b410-4a33-9787-9ff1a49831a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# C++ Libraries\n\nYou have learned how to declare variables, write functions, and use control statements. Those are the basic building blocks of any programming language, and you are ready to write programs in C++.\n\nBut, what if you want to store a string in a variable or do more advanced math like taking the square root of a number? Just like Python, C++ also uses pre-built libraries to help make programming easier. In python, you use these libraries with an \n```python\nimport\n```\n\nstatement.\n\nIn C++, you use\n```c++\n#include\n```\n\nYou have already been using a file called \"iostream\" from the [C++ Standard Library](https://en.wikipedia.org/wiki/C%2B%2B_Standard_Library). The \"iostream\" file contains functions and classes for outputting to a terminal and also reading in from a terminal.\n\nYou were able to take advantage of these pre-built functions by including the appropriate file like so:\n```c++\n#include <iostream>\n```\n\nThat include statement essentially pastes the [iostream](http://en.cppreference.com/w/cpp/header/iostream) file to the top of your code and gives you access to all of its functions and classes.\n\nAs your programs become more complex, you will rely more and more on C++ libraries.",
              "instructor_notes": ""
            },
            {
              "id": 385868,
              "key": "17683243-899b-4aa1-9568-daa45b4e6cd3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### C++ Standard Library\n\nThe [C++ Standard Library](http://en.cppreference.com/w/cpp/header) has a lot of functions and classes like a definition for a string, arrays, tuples, functions for reading in and outputting files, random number generators, definitions for complex number variables, mathematical functions and many other functions as well.\n\nAnd the C++ Standard Library comes with a C++ installation.\n\nBesides this [list](http://en.cppreference.com/w/cpp/header) of files in the Standard Library, search engines are your best friend for finding functionality and libraries in C++. For example, if you are not sure how to do something in C++ like using strings, open a search engine and type \"C++ string syntax\". You will find many examples online of how to use strings in C++ and quickly find an example like the following:\n\n##### Example: Strings\n\nTo use the part of the library that defines strings, you would include a line at the top of your main.cpp file like:\n```c++\n#include <string>\n```\n\n```c++\n#include <string>\n\nint main() {\n   std::string stringvariable = \"stringvalue\";\n   return 0;\n}\n```\n\n##### Example: Math\n\nHere is another example from the standard library.\n```c++\n#include <iostream>\n#include <cmath>\n\nint main ()\n{\n   // calculate \n    std::cout << pow(3.4, 4);\n}\n```\n\nThe pow() function is raising 3.4 to the fourth power. \n\nCmath includes logarithmic and exponential functions, power functions, and trigonometric functions. You can see a full list [here](http://www.cplusplus.com/reference/cmath/).",
              "instructor_notes": ""
            },
            {
              "id": 385884,
              "key": "51da17b5-efe6-49b9-8408-ab45f69f9c14",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Include Syntax\n\nWhen you learned about structuring functions, you saw two different include statements:\n ```\n#include <iostream>\n#include \"distance.h\"\n```\n\nHere is a quiz to help you remember the difference between using quotes and using brackets:",
              "instructor_notes": ""
            },
            {
              "id": 385912,
              "key": "2fd866a6-03ba-4c9d-b42e-b55313120770",
              "title": "Quotes and Brackets",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2fd866a6-03ba-4c9d-b42e-b55313120770",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the difference between using double quotes versus brackets in an include statement?",
                "answers": [
                  {
                    "id": "a1504292477781",
                    "text": "There is no difference. You could use either syntax.",
                    "is_correct": false
                  },
                  {
                    "id": "a1504293247492",
                    "text": "Double quotes looks for files in the main.cpp directory. Brackets look for files where system header files are kept.",
                    "is_correct": true
                  },
                  {
                    "id": "a1504293248021",
                    "text": "Brackets look for files in the main.cpp directory. Double quotes looks for files where system header files are kept.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 385918,
              "key": "f81c2bbd-41bd-49d9-8118-885ff6f1d1f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In fact, you could also write,\n```\n#include \"iostream\"\n#include \"distance.h\"\n```\n\nbut using quotes instead of brackets is less efficient. When using quotes, your program will first look for the iostream file in the main.cpp directory. When the program cannot find the file, the program will search where the standard library files are kept.",
              "instructor_notes": ""
            },
            {
              "id": 385877,
              "key": "031cdd5f-2f71-4b0d-a829-951597362163",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Other Useful Libraries\n\nAs previously mentioned, the C++ Standard Library generally comes with a C++ installation; however, there are many other useful C++ libraries that you install separately. Each library will have its own installation procedure and usually comes with instructions. Again, search engines are your best friends when trying to find and install libraries.\n\nThis [link](http://en.cppreference.com/w/cpp/links/libs) contains a list of many open source C++ libraries. In the list, you will see all kinds of libraries for math, gaming, computer vision, machine learning, as well as many other topics.\n\nIn the next lesson, you will learn to use the C++ vector library.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 458579,
          "key": "dbecad57-628b-45eb-87ca-c0a2d5e9f734",
          "title": "Forge on!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dbecad57-628b-45eb-87ca-c0a2d5e9f734",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 458580,
              "key": "7a5456f4-e0c3-4ae0-a106-f8e9dedebfad",
              "title": "Nd113 C   Basics Last Video V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dtu-RXovl0U",
                "china_cdn_id": "dtu-RXovl0U.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}